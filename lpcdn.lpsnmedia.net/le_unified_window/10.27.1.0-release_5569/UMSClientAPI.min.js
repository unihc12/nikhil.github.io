window.lpTag = window.lpTag || {};
lpTag.taglets = lpTag.taglets || {};
lpTag.taglets.LPWebSocketWrapper = lpTag.taglets.LPWebSocketWrapper || function(a) {
    function b() {}

    function c(a) {
        if (a) {
            Q || "string" != typeof a.server || 0 === a.server.indexOf("ws") && (K = a.server);
            "function" == typeof a.created && R.push({
                cb: a.created,
                context: a.context
            });
            "function" == typeof a.message && S.push({
                cb: a.message,
                context: a.context
            });
            "function" == typeof a.closed && T.push({
                cb: a.closed,
                context: a.context
            });
            "object" == typeof a.ping && h(a.ping);
            if (K) {
                for (var b in Y) Y.hasOwnProperty(b) && typeof a[b] == typeof Y[b] && (Y[b] = a[b]);
                return !!Q || m(Y)
            }
        }
    }

    function d() {
        var a = !1;
        if (H) a = Q;
        else {
            V = 0;
            a = m()
        }
        return a
    }

    function e() {
        return Q
    }

    function f(a) {
        var b = "N/A";
        try {
            b = x(a);
            if (e()) {
                y();
                H.send(b)
            } else j("Socket not connected. [request=" + b + "]", "send")
        } catch (c) {
            j("Unable to send request [exc=" + (c.message || c) + ", request=" + b + "]", "send")
        }
    }

    function g() {
        clearTimeout(J);
        clearTimeout(I);
        K = "";
        t();
        R.length = 0;
        S.length = 0;
        T.length = 0;
        U.length = 0
    }

    function h(a) {
        if ("object" == typeof a && a.request) {
            X.request = JSON.parse(x(a.request));
            O = !0;
            if (a.response) X.response = a.response;
            else if ("object" == typeof a.keys && "object" == typeof X.request && "string" == typeof a.keys.request && "string" == typeof a.keys.response) {
                X.reqKey = a.keys.request;
                X.resKey = a.keys.response
            }
            "function" == typeof a.callback && U.push({
                cb: a.callback
            });
            (X.response || X.reqKey && X.resKey) && (X.timeout = a.timeout || Y.pingTimeout);
            X.idleBeforePing = a.idleBeforePing || Y.idleBeforePing
        }
    }

    function i(a, b, c) {
        if (window.lpTag && lpTag.log) {
            "string" == typeof a && c && (a = c + ": " + a);
            lpTag.log(a, b, L)
        }
    }

    function j(a, b) {
        i(a, Z.ERROR, b)
    }

    function k() {
        if (V >= Y.maxReconnectAttempt) v("cb", T, {
            state: "TERMINAL",
            code: 503,
            message: "Socket terminal, will not reconnect"
        });
        else if (Y.autoReconnect && K) {
            J && clearTimeout(J);
            J = setTimeout(function() {
                if (!m()) {
                    V += 1;
                    k()
                }
            }, l())
        }
    }

    function l() {
        var a;
        a = V < W[0].count ? Y.reconnectTimeout || W[0].timeout : V < W[1].count ? W[1].timeout : W[2].timeout;
        return a
    }

    function m(a) {
        var b = !1;
        K = a && a.server || K;
        if (!H && K && !0 === navigator.onLine) {
            try {
                H = new WebSocket(K)
            } catch (c) {
                j("Exception creating WebSocket: " + c.message, "_createSocket");
                H = null
            }
            if (H && H.readyState <= 3) {
                n();
                b = !0
            }
        }
        return b
    }

    function n() {
        if (H && "function" != typeof H.onopen) {
            H.onopen = p;
            H.onclose = s;
            H.onerror = E;
            H.onmessage = q
        }
    }

    function o() {
        if (H) {
            H.onopen = null;
            H.onclose = null;
            H.onerror = null;
            H.onmessage = null
        }
    }

    function p(a) {
        Q = !0;
        V = 0;
        v("cb", R, u(a) || {
            state: "OPEN",
            code: 200
        })
    }

    function q(a) {
        var b = !1;
        if (a) try {
            var c = r(a.data);
            P && (b = D(c));
            y();
            b || v("cb", S, c)
        } catch (d) {
            j("failed to process message", "_socketMessage")
        }
    }

    function r(a) {
        var b = a;
        try {
            b = JSON.parse(a)
        } catch (c) {
            j("Unable to parse message", "transformToJSON")
        }
        return b
    }

    function s(a, b) {
        Q = !1;
        F();
        v("cb", T, u(a, b) || {
            state: "CLOSED",
            code: 500
        });
        k()
    }

    function t() {
        Y.autoReconnect = !1;
        if (Q) {
            H.close();
            Q = !1
        }
        F()
    }

    function u(a, b) {
        return a ? {
            name: L,
            state: a.type,
            code: a.code,
            statusCode: a.code > 1e3 || b ? 500 : 200,
            reason: a.reason || "",
            domain: a.srcElement && a.srcElement.url ? a.srcElement.url : ""
        } : null
    }

    function v(a, b, c) {
        var d;
        if (b) {
            d = b.constructor === Array ? b : [b];
            for (var e = 0; e < d.length; e++) w(d[e][a], c, d[e].context)
        }
        d = null
    }

    function w(a, b, c) {
        if ("function" == typeof a) try {
            a.call(c || null, b)
        } catch (d) {
            j("Error executing callback", "_runCallback")
        }
    }

    function x(a) {
        var b;
        if ("function" == typeof Array.prototype.toJSON) {
            var c = Array.prototype.toJSON;
            delete Array.prototype.toJSON;
            try {
                b = JSON.stringify(a)
            } catch (d) {
                Array.prototype.toJSON = c;
                throw d
            }
            Array.prototype.toJSON = c
        } else b = JSON.stringify(a);
        return b
    }

    function y() {
        if (O && !P) {
            z();
            X.timeoutId = setTimeout(A, X.idleBeforePing)
        }
    }

    function z() {
        if (X.timeoutId) {
            clearTimeout(X.timeoutId);
            X.timeoutId = null
        }
    }

    function A() {
        if (O && !P) {
            P = !0;
            f(C(), !0);
            X.timeout && (I = setTimeout(B, X.timeout))
        }
    }

    function B() {
        P = !1;
        v("cb", U, {
            state: "TIMEOUT",
            code: 404,
            message: "No Ping Response from Service"
        });
        delete X.timeoutId;
        y()
    }

    function C() {
        var a;
        if (X.request) {
            a = JSON.parse(x(X.request));
            if (X.reqKey && "object" == typeof a) {
                X.lastKey = "pingKey_" + Math.floor(99999999 * Math.random());
                a[X.reqKey] = X.lastKey
            }
        }
        return a
    }

    function D(a) {
        if (X.response || X.reqKey && X.resKey) {
            X.response ? a === X.response && (P = !1) : "object" == typeof a && a[X.resKey] === X.lastKey && (P = !1);
            if (!P && I) {
                clearTimeout(I);
                I = null
            }
            v("cb", U, {
                state: "PING_SUCCESS",
                code: 200,
                message: "Ping Response"
            })
        }
        return !P
    }

    function E(a) {
        s(a, !0);
        V += 1
    }

    function F() {
        o();
        z();
        H = null
    }

    function G() {
        var a = "WebSocket is not supported here.";
        j(a, "socketNotSupported");
        return a
    }
    var H, I, J, K, L = "LPWebSocketWrapper",
        M = "0.9.8",
        N = void 0 !== window.WebSocket && (("" + window.WebSocket).indexOf("[native") > -1 || ("" + window.WebSocket).indexOf("WebSocketConstructor") > -1),
        O = !1,
        P = !1,
        Q = !1,
        R = [],
        S = [],
        T = [],
        U = [],
        V = 0,
        W = [{
            count: 5,
            timeout: 2e3
        }, {
            count: 20,
            timeout: 5e3
        }, {
            timeout: 1e4
        }],
        X = {},
        Y = {
            autoReconnect: !0,
            reconnectTimeout: 2e3,
            maxReconnectAttempt: 100,
            idleBeforePing: 1e4,
            pingTimeout: 3e4
        },
        Z = {
            DEBUG: "DEBUG",
            INFO: "INFO",
            ERROR: "ERROR"
        };
    c(a);
    return {
        name: L,
        v: M,
        init: b,
        dispose: g,
        supported: N,
        connected: e,
        configure: N ? c : G,
        send: N ? f : G,
        restartSocket: N ? d : G
    }
};
window.lpTag = window.lpTag || {};
lpTag.taglets = lpTag.taglets || {};
lpTag.taglets.postmessage = lpTag.taglets.postmessage || function(a) {
    function b(a) {
        var b = 0 === location.protocol.indexOf("https");
        if (a) {
            if (a.frames) {
                a.frames = a.frames.constructor === Array ? a.frames : [a.frames];
                for (var c = 0; c < a.frames.length; c++) o(a.frames[c], b)
            }
            if (a.defaults)
                for (var d in a.defaults) sa.hasOwnProperty(d) && a.defaults.hasOwnProperty(d) && (sa[d] = a.defaults[d])
        }
        ca = !0
    }

    function c() {
        if (lpTag && lpTag.taglets && lpTag.taglets.lpAjax) try {
            lpTag.taglets.lpAjax.addTransport(ba, va)
        } catch (a) {}
    }

    function d(b) {
        var c = !1;
        if (a.postMessage && a.JSON && b && b.success && (b.domain && b.validation || b.url)) {
            b.domain = b.domain || n(b.url);
            (da[b.domain] || ja[b.domain]) && (c = !0)
        }
        return c
    }

    function e(a) {
        var b = !1;
        if (ca && d(a))
            if (da[a.domain])
                if (da[a.domain].validated !== ua.PENDING || a.validation) {
                    b = I(a);
                    b ? u(a.domain) : ea[a.callId].timeout = 0
                } else b = v(a.domain, a);
        else {
            Z("Adding iFrame to DOM - first request: " + a.domain, ma.INFO, "issueCall");
            b = v(a.domain, a);
            p(ja[a.domain]);
            delete ja[a.domain]
        } else b = H(a.domain, a.error, a.context);
        return b
    }

    function f(a) {
        return a && da[a] ? {
            url: da[a].url,
            validated: da[a].validated,
            requestCount: da[a].requestCount,
            defaults: N(da[a].defaults),
            started: da[a].validated === ua.VALIDATED
        } : {}
    }

    function g() {
        var a = {};
        for (var b in da) da.hasOwnProperty(b) && (a[b] = f(b));
        return a
    }

    function h(a, b, c) {
        a.addEventListener ? a.addEventListener(b, c, !1) : a.attachEvent("on" + b, c)
    }

    function i(a, b) {
        return {
            callId: a,
            responseType: b.responseType,
            responseCode: b.responseCode,
            error: {
                message: b.message,
                id: b.responseCode,
                name: b.name
            }
        }
    }

    function j(a, b, c) {
        a.removeEventListener ? a.removeEventListener(b, c, !1) : a.detachEvent && a.detachEvent("on" + b, c)
    }

    function k() {
        if (document.body) {
            ka = !0;
            l()
        } else setTimeout(k, 5)
    }

    function l() {
        for (; la.length > 0;) try {
            la.shift().call(null)
        } catch (a) {
            Z("Unable to execute queued callbacks for window interactive state: " + a, ma.ERROR, "_attachPendingIFrames")
        }
    }

    function m(a) {
        return a + "_" + Math.floor(1e5 * Math.random()) + "_" + Math.floor(1e5 * Math.random())
    }

    function n(a) {
        var b, c = new RegExp(/(http{1}s{0,1}?:\/\/)([^\/\?]+)(\/?)/gi),
            d = null;
        if (0 !== a.indexOf("http")) return location.protocol + "//" + location.host;
        b = c.exec(a);
        b && b.length >= 3 && "" !== b[2] && (d = b[1].toLowerCase() + b[2].toLowerCase());
        return d
    }

    function o(a, b) {
        var c, d, e = !1;
        if (!a || !a.url || "string" != typeof a.url) {
            Z("iFrame configuration empty or missing url parameter", ma.ERROR, "_queueFrame");
            return e
        }
        c = n(a.url);
        d = 0 === a.url.toLowerCase().indexOf("https");
        if (!(da[c] || ja[c] || b && d !== b)) {
            ja[c] = a;
            e = !0
        }
        return e
    }

    function p(a) {
        var b = n(a.url);
        if (da[b]) return w(b, a.callback || a.success, a.context);
        var c = m("fr");
        da[b] = {
            elem: x(c),
            url: a.url,
            validated: ua.PENDING,
            defaults: a.defaults || {},
            delayLoad: isNaN(a.delayLoad) ? 0 : a.delayLoad,
            requestCount: 0,
            success: a.callback || a.success,
            error: a.error,
            maxReloadRetries: a.maxReloadRetries || 3,
            reloadInterval: 1e3 * a.reloadInterval || 3e4
        };
        setTimeout(function() {
            r(a.url, b)
        }, da[b].delayLoad);
        Z("iFrame Queued to load " + b, ma.INFO, "_addFrame");
        return ua.PENDING
    }

    function q(a) {
        var b = n(a.url);
        ja[b] = {
            url: a.url,
            defaults: a.defaults || {},
            delayLoad: a.delayLoad,
            success: a.success,
            error: a.error,
            maxReloadRetries: a.maxReloadRetries,
            reloadInterval: a.reloadInterval / 1e3
        }
    }

    function r(a, b) {
        ka ? s(a, b) : la.push(function() {
            s(a, b)
        })
    }

    function s(a, b) {
        da[b].loadCallback = da[b].loadCallback || t(b);
        S(da[b].elem, a);
        h(da[b].elem, "load", da[b].loadCallback);
        da[b].iFrameOnloadTimeout = setTimeout(da[b].loadCallback, ta);
        da[b].attachTime = (new Date).getTime();
        document.body.appendChild(da[b].elem)
    }

    function t(a) {
        return function(b) {
            if (da[a].iFrameOnloadTimeout) {
                clearTimeout(da[a].iFrameOnloadTimeout);
                delete da[a].iFrameOnloadTimeout
            }
            da[a].loadTime = (new Date).getTime() - da[a].attachTime;
            A(a, b)
        }
    }

    function u(a) {
        ga += 1;
        ia += 1;
        da[a].requestCount = da[a].requestCount + 1
    }

    function v(a, b) {
        fa[a] = fa[a] || [];
        fa[a].push(b);
        return !0
    }

    function w(a, b, c) {
        W(b, c, f(a));
        return da[a].validated
    }

    function x(a) {
        var b = document.createElement("IFRAME");
        b.setAttribute("id", a);
        b.setAttribute("name", a);
        b.setAttribute("tabindex", "-1");
        b.setAttribute("aria-hidden", "true");
        b.setAttribute("title", "");
        b.setAttribute("role", "presentation");
        b.style.width = "0px";
        b.style.height = "0px";
        b.style.position = "absolute";
        b.style.top = "-1000px";
        b.style.left = "-1000px";
        b.style.display = "none";
        return b
    }

    function y(a, b, c, d, e, f) {
        var g = !1;
        if (a && b && "function" == typeof b) {
            ea[a] = {
                success: b,
                error: c,
                progress: d,
                ctx: e,
                launchTime: new Date,
                timeout: isNaN(f) ? sa.timeout : f + 1e3
            };
            g = !0
        }
        return g
    }

    function z(a) {
        if (ea[a]) {
            ea[a] = null;
            delete ea[a];
            return !0
        }
        return !1
    }

    function A(a, b) {
        Z("onLoad validation called " + a, ma.INFO, "_validateFrame");
        var c = function(b) {
            B(b, a)
        };
        b && b.error ? B(b, a) : setTimeout(function() {
            e({
                domain: a,
                success: c,
                error: c,
                validation: !0,
                timeout: 100,
                retries: -1,
                defaults: da[a].defaults
            })
        }, 10);
        return !0
    }

    function B(a, b) {
        var c, d = da[b];
        Z("running validation of domain " + b, ma.INFO, "_validateFrameCallback");
        if (d) {
            da[b].validated = a && a.error ? ua.FAILED : ua.VALIDATED;
            c = da[b].validated === ua.VALIDATED;
            c ? C(b, a) : da[b].reloadObj && da[b].reloadObj.retriesLeft > 0 ? E(b) : D(b)
        }
        d = null;
        return c
    }

    function C(a, b) {
        var c;
        Z("FrameLoaded " + a, ma.INFO, "_runFrameValidated");
        c = N(qa);
        for (var d in b) b.hasOwnProperty(d) && (c[d] = b[d]);
        W(da[a].success, da[a].context, c);
        U(a);
        F(a, !0)
    }

    function D(a) {
        Z("iFrame is a teapot " + a, ma.ERROR, "_runFrameFailedToLoad");
        if (da[a].error) {
            var b = i(0, ra);
            b.domain = a;
            W(da[a].error, da[a].context, b)
        }
        G(a);
        F(a, !1)
    }

    function E(a) {
        Z("Retry loading domain: " + a, "info", "_runReloadAttempt");
        F(a, !1);
        P(a)
    }

    function F(a, b) {
        Z("Running buffer queue : " + a + " loaded: " + b, ma.INFO, "_runQueuedRequests");
        if (fa[a] && fa[a].length > 0) {
            do {
                var c = fa[a].shift();
                b ? e(c) : W(c.error, c.context, {
                    responseCode: 600,
                    error: "Transport - postmessage - unable to run request: " + a,
                    body: "ERROR"
                })
            } while (fa[a].length > 0);
            fa[a] = null;
            delete fa[a]
        }
    }

    function G(a) {
        Z("Cleaning up failed iFrame: " + a, ma.INFO, "_cleanupIFrame");
        if (da[a]) {
            j(da[a].elem, "load", da[a].loadCallback);
            da[a].elem.parentNode.removeChild(da[a].elem);
            var b = N(ra);
            b.domain = a;
            b.url = da[a].url;
            W(da[a].error, da[a].context, b);
            q(da[a]);
            da[a] = null;
            delete da[a]
        }
    }

    function H(a, b, c) {
        Z("Frame not found for domain: " + a, ma.ERROR, "_noFrameFound");
        W(b, {
            responseCode: 600,
            error: "Transport - postmessage - unable to run request: " + a,
            body: "ERROR"
        }, c);
        return !1
    }

    function I(a) {
        var b, c = !1;
        a = K(a);
        b = N(a);
        try {
            b = J(b)
        } catch (d) {
            Z("Error trying to _stringify message", ma.ERROR, "sendMessageToFrame");
            return !1
        }
        Z("sending msg to domain " + a.domain, ma.DEBUG, "sendMessageToFrame");
        var e;
        isNaN(a.timeout) || isNaN(a.retries) || (e = a.timeout * (a.retries + 1) + 2e3);
        y(a.callId, a.success, a.error, a.progress, a.context, e);
        try {
            c = L(a.domain, b);
            _ = setTimeout(M, 1e3)
        } catch (d) {
            Z("Error trying to send message: " + d, ma.ERROR, "sendMessageToFrame");
            c = !1
        }
        return c
    }

    function J(a) {
        var b;
        if ("function" == typeof Array.prototype.toJSON) {
            var c = Array.prototype.toJSON;
            delete Array.prototype.toJSON;
            try {
                b = JSON.stringify(a)
            } catch (d) {
                Array.prototype.toJSON = c;
                throw d
            }
            Array.prototype.toJSON = c
        } else b = JSON.stringify(a);
        return b
    }

    function K(b) {
        var c = da[b.domain] && da[b.domain].defaults;
        b.callId = m("call");
        b.returnDomain = na;
        void 0 === b.timeout && (b.timeout = c && c.timeout || sa.timeout);
        void 0 === b.retries && (b.retries = c && void 0 !== c.retries ? c.retries : sa.retries);
        b.progress && (b.fireProgress = !0);
        b.headers = b.headers || {};
        b.headers["LP-URL"] = a.location.href;
        return b
    }

    function L(a, b) {
        var c = !1;
        try {
            da[a].elem.contentWindow.postMessage(b, a);
            c = !0
        } catch (d) {
            Z("Error trying to send message: " + d, ma.ERROR, "_postTheMessage")
        }
        return c
    }

    function M() {
        _ && clearTimeout(_);
        _ = null;
        var a = new Date,
            b = 0,
            c = [];
        for (var d in ea)
            if (ea.hasOwnProperty(d) && ea[d].launchTime) {
                var e = a - ea[d].launchTime;
                e > ea[d].timeout ? c.push(d) : b += 1
            }
        if (c.length) {
            Z("Checking errors found " + c.length + " timeout callbacks to call", ma.DEBUG, "_checkForErrors");
            for (var f = 0; f < c.length; f++) O(i(c[f], pa))
        }
        b > 0 && (_ = setTimeout(M, 1e3));
        return !0
    }

    function N(a) {
        var b = a;
        try {
            b = JSON.parse(J(a))
        } catch (c) {}
        return b
    }

    function O(a, b) {
        var c, d = ea[a.callId],
            e = a.responseType,
            f = !1;
        if (a.callId && ea[a.callId] || a.responseType === oa.reloading || a.responseType === oa.stats) try {
            switch (e) {
                case oa.completed:
                    c = d.success;
                    f = !0;
                    break;
                case oa.error:
                    c = d.error;
                    f = !0;
                    ha += 1;
                    break;
                case oa.progress:
                    c = d.progress;
                    break;
                case oa.reloading:
                    a = b;
                    c = P;
                    break;
                case oa.stats:
                    c = $;
                    a = a.rawData
            }
            if (f) {
                z(a.callId);
                V(a);
                ia = ia >= 0 ? 0 : ia - 1
            }
            c && "function" == typeof c && W(c, d && d.ctx || null, a);
            c = null;
            d = null
        } catch (g) {
            Z("Error in executing callback: " + g, ma.ERROR, "_executeMessageCallback");
            return !1
        }
        return !0
    }

    function P(a) {
        Z("Got reload request from " + a, ma.INFO, "_handleReload");
        da[a].validated = ua.PENDING;
        if (!da[a].reloadObj) {
            Z("Creating reloadObj" + a, ma.DEBUG, "_handleReload");
            da[a].reloadObj = T(a)
        }
        Q(a)
    }

    function Q(a) {
        Z("Reload try for domain " + a + " ,retries left " + da[a].reloadObj.retriesLeft, ma.INFO, "_reloadIFrame");
        da[a].reloadObj.retriesLeft = da[a].reloadObj.retriesLeft - 1;
        da[a].reloadObj.setLocationTimeout && clearTimeout(da[a].reloadObj.setLocationTimeout);
        if (da[a].reloadObj.retry) da[a].reloadObj.setLocationTimeout = setTimeout(R(a), da[a].reloadInterval);
        else {
            da[a].reloadObj.retry = !0;
            R(a)()
        }
    }

    function R(a) {
        return function() {
            da[a].iFrameOnloadTimeout = setTimeout(function() {
                A(a, {
                    error: {
                        code: 404,
                        message: "Frame did not trigger load"
                    }
                })
            }, ta);
            S(da[a].elem, da[a].url)
        }
    }

    function S(a, b) {
        b += b.indexOf("?") > 0 ? "&bust=" : "?bust=";
        b += (new Date).getTime();
        b += "&loc=" + encodeURIComponent(location.protocol + "//" + location.host);
        Z("Setting iFrame to URL: " + b, ma.INFO, "_setIFrameLocation");
        a.setAttribute("src", b)
    }

    function T(a) {
        Z("Creating reload object " + a, ma.INFO, "_createReloadObject");
        return {
            retriesLeft: da[a].maxReloadRetries
        }
    }

    function U(a) {
        Z("Cleaning up reload object for this instance" + a, ma.INFO, "_cleanUpReloadObject");
        if (da[a].reloadObj) {
            da[a].reloadObj.setLocationTimeout && clearTimeout(da[a].reloadObj.setLocationTimeout);
            da[a].reloadObj = null;
            delete da[a].reloadObj
        }
    }

    function V(a) {
        for (var b = ["callId", "responseType"], c = 0; c < b.length; c++) {
            a[b[c]] = null;
            delete a[b[c]]
        }
    }

    function W(a, b, c) {
        if (a && "function" == typeof a) try {
            a.call(b || null, c)
        } catch (d) {
            Z("Error in executing callback: " + d, ma.ERROR, "runCallback")
        }
    }

    function X(a) {
        var b, c;
        try {
            c = a.origin;
            if (!da[c]) return;
            b = Y(a.data);
            b.body = Y(b.body)
        } catch (d) {
            b = null;
            Z("Error in handling message from frame:" + d + " origin: " + c, ma.ERROR, "_handleMessage")
        }
        b && "object" == typeof b && O(b, c)
    }

    function Y(a) {
        var b = a;
        if ("string" == typeof a) try {
            b = JSON.parse(a)
        } catch (c) {
            Z("Error in parsing string: " + a, ma.DEBUG, "_parseJSONString")
        }
        return b
    }

    function Z(b, c, d) {
        if (a.lpTag && lpTag.log) {
            "string" == typeof b && d && (b = d + ": " + b);
            lpTag.log(b, c, ba)
        }
    }

    function $(a) {
        if (lpTag.taglets.lpAjax && lpTag.taglets.lpAjax.publishMetrics) {
            a.tags && a.tags.constructor === Array && a.tags.push({
                transport: ba
            });
            lpTag.taglets.lpAjax.publishMetrics(a)
        }
    }
    var _, aa = "1.1.8",
        ba = "postmessage",
        ca = !0,
        da = {},
        ea = {},
        fa = {},
        ga = 0,
        ha = 0,
        ia = 0,
        ja = {},
        ka = !1,
        la = [],
        ma = {
            DEBUG: "DEBUG",
            INFO: "INFO",
            ERROR: "ERROR"
        },
        na = n(document.location.href),
        oa = {
            progress: "progressLoad",
            completed: "completeLoad",
            success: "success",
            error: "errorLoad",
            reloading: "reloading",
            stats: "statData"
        },
        pa = {
            responseType: oa.error,
            responseCode: 404,
            message: "Request timed out on parent postMessage layer",
            name: "TIMEOUT"
        },
        qa = {
            responseType: oa.success,
            responseCode: 200,
            message: "iFrame has successfully loaded",
            name: "OK"
        },
        ra = {
            responseType: oa.error,
            responseCode: 418,
            message: "This iFrame is a teapot, not very useful for communication but lovely for earl grey",
            name: "TEAPOT"
        },
        sa = {
            timeout: 6e4,
            metricsCount: 1e3
        },
        ta = 1e4,
        ua = {
            VALIDATED: "valid",
            PENDING: "pending",
            FAILED: "failed"
        };
    k();
    h(a, "message", X);
    var va = {
        v: aa,
        name: ba,
        init: c,
        issueCall: e,
        isValidRequest: d,
        getVersion: function() {
            return aa
        },
        getName: function() {
            return ba
        },
        configure: b,
        getFrameData: f,
        inspect: function() {
            return {
                name: ba,
                version: aa,
                callsMade: ga,
                errorsFound: ha,
                pending: ia,
                defaults: sa,
                iFrameList: N(ja),
                activeFrames: g()
            }
        }
    };
    c();
    return va
}(window);
window.lpTag = window.lpTag || {};
lpTag.cookieMethods = lpTag.cookieMethods || function() {
    "use strict";

    function a() {
        return !!navigator.userAgent.match(/Chrome/)
    }

    function b() {
        var b = "lpTestCookie" + (new Date).getTime(),
            d = "testValue";
        i({
            name: b,
            value: d
        });
        k = d === f(b);
        j(b);
        !k && a() && c();
        m = !1;
        return k
    }

    function c() {
        var a = "lpTestCookie" + (new Date).getTime(),
            b = "testValue";
        i({
            name: a,
            value: b,
            sameSite: "none",
            secure: !0
        });
        l = b === f(a);
        j(a, null, null, !0, "none");
        return l
    }

    function d() {
        return k
    }

    function e() {
        return l
    }

    function f(a) {
        var b, c, d = "; ",
            e = "";
        if (m || k || l) {
            if ("string" != typeof a) return "";
            a = encodeURIComponent(a);
            try {
                c = d + document.cookie
            } catch (f) {}
            b = c.split(d + a + "=");
            e = 1 == b.length ? "" : decodeURIComponent(b[1].split(";")[0])
        }
        return e
    }

    function g(a, b, c) {
        c = "number" == typeof c ? c : 2592e3;
        "object" == typeof a && (a.seconds = c);
        return h(a, b, c)
    }

    function h(a, b, c, d, e, f, g) {
        return i("object" == typeof a ? a : {
            name: a,
            value: b,
            seconds: c,
            path: d,
            domain: e,
            secure: f,
            sameSite: g
        })
    }

    function i(a) {
        var b, c, d = !1;
        if (m || k || l && a.secure && "none" === a.sameSite) {
            if ("string" != typeof a.name || "" === a.name) return !1;
            null !== a.value && void 0 !== a.value || (a.seconds = -1);
            if ("number" == typeof a.seconds) {
                c = (new Date).getTime();
                b = new Date(c + 1e3 * a.seconds)
            }
            a.value = a.value ? encodeURIComponent(a.value) : "";
            try {
                document.cookie = [encodeURIComponent(a.name), "=", a.value, b ? "; expires=" + b.toUTCString() : "", a.path ? "; path=" + a.path : "", a.domain ? "; domain=" + a.domain : "", a.secure ? "; secure" : "", a.sameSite ? "; samesite=" + a.sameSite : ""].join("");
                d = !0
            } catch (e) {}
        }
        return d
    }

    function j(a, b, c, d, e) {
        return i({
            name: a,
            path: b,
            domain: c,
            secure: d,
            sameSite: e
        })
    }
    var k = !1,
        l = !1,
        m = !0;
    b();
    return {
        clearCookie: j,
        writeSessionCookie: h,
        writePersistentCookie: g,
        readCookie: f,
        isCookieEnabled: d,
        isChromeThirdPartyEnabled: e
    }
}();
window.lpTag = window.lpTag || {};
lpTag.storageMethods = lpTag.storageMethods || function() {
    "use strict";

    function a() {
        return l && m
    }

    function b() {
        return l
    }

    function c() {
        return m
    }

    function d(a, c) {
        if (b()) {
            sessionStorage.setItem(a, c);
            return !0
        }
    }

    function e(a) {
        return b() ? sessionStorage.getItem(a) || "" : void 0
    }

    function f(a) {
        if (b() && e(a)) {
            sessionStorage.removeItem(a);
            return !0
        }
        return !1
    }

    function g(a, b) {
        if (c()) {
            localStorage.setItem(a, b);
            return !0
        }
    }

    function h(a) {
        return c() ? localStorage.getItem(a) || "" : void 0
    }

    function i(a) {
        if (c() && h(a)) {
            localStorage.removeItem(a);
            return !0
        }
        return !1
    }

    function j() {
        try {
            l = k(sessionStorage);
            m = k(localStorage)
        } catch (a) {}
    }

    function k(a) {
        var b = !1,
            c = "lpTestCase",
            d = "abc";
        try {
            if ("undefined" != typeof Storage) {
                a.setItem(c, d);
                b = a.getItem(c) === d;
                a.removeItem(c)
            }
        } catch (e) {}
        return b
    }
    var l = !1,
        m = !1;
    j();
    return {
        isStorageEnabled: a,
        isSessionStorageEnabled: b,
        isLocalStorageEnabled: c,
        setSessionData: d,
        getSessionData: e,
        removeSessionData: f,
        setPersistentData: g,
        getPersistentData: h,
        removePersistentData: i
    }
}();
window.lpTag = window.lpTag || {};
lpTag.SessionDataManager = lpTag.SessionDataManager || function(a) {
    "use strict";

    function b(a) {
        lpTag && lpTag.log && lpTag.log(a, "ERROR", "SessionData")
    }

    function c(a, c, d) {
        var e = !1;
        if ("object" != typeof c) try {
            var f = d ? g.getPersistentSessionData(a) : g.getSessionData(a),
                h = "" !== f ? f.split(i) : [];
            h.push(c);
            f = h.join(i);
            e = d ? g.setPersistentData(a, f, d) : g.setSessionData(a, f)
        } catch (j) {
            b((d ? "appendToPersistentData " : "appendToSessionData ") + " failed, key: " + a)
        }
        return e
    }

    function d(a, c, d) {
        var e = !1;
        if ("object" != typeof c) try {
            for (var f = d ? g.getPersistentSessionData(a) : g.getSessionData(a), h = "" !== f ? f.split(i) : [], j = [], k = 0; k < h.length; k++) h[k] !== c && j.push(h[k]);
            f = j.join(i);
            e = "" !== f ? d ? g.setPersistentData(a, f, d) : g.setSessionData(a, f) : d ? g.removePersistentData(a) : g.removeSessionData(a)
        } catch (l) {
            b((d ? "removePartialPersistentData " : "removePartialSessionData ") + " failed, key: " + a)
        }
        return e
    }
    var e, f, g, h, i = "::",
        j = {},
        k = {},
        l = "object" == typeof a ? a : {};
    if (this !== window) {
        e = lpTag.storageMethods;
        f = lpTag.cookieMethods;
        h = !0 !== l.disableStorage && e.isStorageEnabled();
        g = this;
        this.readCookie = function(a) {
            return f.readCookie(a)
        };
        this.setSessionData = function(a, c) {
            c = this.stringifyValue(c);
            try {
                j[a] || (j[a] = a);
                h ? e.setSessionData(a, c) : f.writeSessionCookie(a, c)
            } catch (d) {
                b("Error in setSessionData, data: " + a)
            }
        };
        this.getSessionData = function(a) {
            try {
                return this.parseValue(h ? e.getSessionData(a) : f.readCookie(a))
            } catch (c) {
                b("Error in getSessionData, data: " + a)
            }
        };
        this.stringifyValue = function(a) {
            try {
                "object" == typeof a && (a = JSON.stringify(a))
            } catch (b) {}
            return a
        };
        this.parseValue = function(a) {
            try {
                a = JSON.parse(a)
            } catch (b) {}
            return a
        };
        this.getPersistentSessionData = function(a) {
            try {
                return this.parseValue(h ? e.getPersistentData(a) : f.readCookie(a))
            } catch (c) {
                b("Error in getPersistentSessionData, data: " + a)
            }
        };
        this.appendToSessionData = function(a, b) {
            c(a, b, !1)
        };
        this.appendToPersistentData = function(a, b, d) {
            c(a, b, !0, d)
        };
        this.removePartialPersistentData = function(a, b) {
            d(a, b, !0)
        };
        this.removeSessionData = function(a) {
            h ? e.removeSessionData(a) : f.clearCookie(a)
        };
        this.removePersistentData = function(a) {
            h ? e.removePersistentData(a) : f.clearCookie(a)
        };
        this.removePartialSessionData = function(a, b) {
            d(a, b, !1)
        };
        this.setPersistentData = function(a, c, d) {
            c = this.stringifyValue(c);
            try {
                k[a] || (k[a] = a);
                h ? e.setPersistentData(a, c) : f.writePersistentCookie(a, c, d)
            } catch (g) {
                b("Error in setPersistentData, data: " + a)
            }
        };
        this.clearPersistentData = function(a) {
            a = a || k;
            for (var c in a) try {
                h ? e.removePersistentData(a[c]) : f.clearCookie(a[c])
            } catch (d) {
                b("Error in clearPersistentData, key: " + a[c])
            }
        };
        this.clearSessionData = function(a) {
            a = a || j;
            for (var c in a) try {
                h ? e.removeSessionData(a[c]) : f.clearCookie(a[c])
            } catch (d) {
                b("Error in SessionData in clearSessionData, key:" + a[c])
            }
        }
    }
};
window.lpTag = window.lpTag || {};
lpTag.taglets = lpTag.taglets || {};
lpTag.utils = lpTag.utils || {};
lpTag.utils.SessionDataAsyncWrapper = lpTag.utils.SessionDataAsyncWrapper || function(a) {
    "use strict";

    function b(a, b, c, d) {
        var e;
        if (o) j.getValue({
            key: a,
            app: p,
            appName: h,
            site: n,
            success: f(a, b, d),
            error: f(a, c, d),
            context: d,
            domain: k,
            firstParty: l
        });
        else {
            e = q.getSessionData(a);
            void 0 !== e ? g(b, e, d) : g(c, e, d)
        }
    }

    function c(a, b, c, d, e) {
        o ? j.setValue({
            key: a,
            app: p,
            appName: h,
            value: b,
            site: n,
            success: f(a, c, e),
            error: f(a, d, e),
            context: e,
            domain: k,
            firstParty: l
        }) : q.setSessionData(a, b) ? g(c, !0, e) : g(d, !1, e)
    }

    function d(a, b, c, d) {
        o ? j.setValue({
            key: a,
            app: p,
            appName: h,
            site: n,
            success: f(a, b, d),
            error: f(a, c, d),
            context: d,
            domain: k,
            expires: -1,
            firstParty: l
        }) : q.removeSessionData(a) ? g(b, !0, d) : g(c, !1, d)
    }

    function e() {
        return "function" == typeof lpTag.getEnv && lpTag.getEnv()
    }

    function f(a, b, c) {
        return function(a) {
            g(b, a, c)
        }
    }

    function g(a, b, c) {
        try {
            a && "function" == typeof a && a.call(c, b)
        } catch (d) {}
    }
    if (this === window) return null;
    a = a || {};
    var h, i, j, k, l, m = a.useSecureStorage,
        n = a.lpNumber,
        o = !1,
        p = a.app || "sessionDataAsyncWrapper";
    if (m) {
        h = a.appName;
        i = a.env || e();
        j = lpTag.taglets && lpTag.taglets.lpSecureStorage;
        k = a.secureStorageLocation;
        l = a.firstParty;
        o = !!(m && k && j && h && n);
        o && j.configure({
            conf: {
                site: n,
                env: i,
                app: p,
                url: k,
                firstParty: l
            }
        })
    }
    lpTag.SessionDataManager && (lpTag.utils.sessionDataManager = lpTag.utils.sessionDataManager || new lpTag.SessionDataManager(a));
    var q = lpTag.utils.sessionDataManager || null;
    return {
        setSessionData: c,
        getSessionData: b,
        removeSessionData: d,
        readCookie: lpTag.utils.sessionDataManager && lpTag.utils.sessionDataManager.readCookie,
        usingSecureStorage: o
    }
};
Object.freeze || (Object.prototype.freeze = function(a) {
    return a
});
window.lpTag = window.lpTag || {};
lpTag.AMSStatics = lpTag.AMSStatics || Object.freeze({
    memberTypes: {
        AGENT: "AGENT",
        USER: "VISITOR"
    },
    roles: {
        ASSIGNED_AGENT: "ASSIGNED_AGENT",
        AGENT: "AGENT",
        CONSUMER: "CONSUMER",
        MANAGER: "MANAGER",
        READER: "READER"
    },
    channelTypes: {
        MESSAGING: "MESSAGING",
        LIVE_CHAT: "LIVE_CHAT"
    },
    assignedAgentState: {
        ACTIVE: "ACTIVE",
        SUGGESTED: "SUGGESTED"
    },
    messageState: {
        PENDING: "PENDING",
        SENT: "SENT",
        ACCEPT: "ACCEPT",
        READ: "READ",
        VIEWED: "VIEWED",
        ERROR: "ERROR",
        NACK: "NACK",
        ACTION: "ACTION"
    },
    conversation: {
        states: {
            OPEN: "OPEN",
            CLOSE: "CLOSE",
            LOCKED: "LOCKED"
        },
        closeReasons: {
            AGENT: "AGENT",
            CONSUMER: "CONSUMER",
            TIMEOUT: "TIMEOUT",
            SYSTEM: "SYSTEM"
        }
    },
    dialog: {
        states: {
            OPEN: "OPEN",
            CLOSE: "CLOSE"
        },
        types: {
            MAIN: "MAIN",
            POST_SURVEY: "POST_SURVEY",
            AGENT: "AGENT",
            OTHER: "OTHER"
        },
        channelTypes: {
            MESSAGING: "MESSAGING",
            COBROWSE: "COBROWSE"
        },
        closeReasons: {
            AGENT: "AGENT",
            CONSUMER: "CONSUMER",
            SYSTEM: "SYSTEM"
        },
        closedCauses: {
            CONSUMER: "Closed by consumer"
        }
    },
    chatStates: {
        ACTIVE: "active",
        INACTIVE: "inactive",
        GONE: "gone",
        COMPOSING: "composing",
        PAUSE: "pause"
    },
    dialogActions: {
        CREATE: "CREATE",
        UPDATE: "UPDATE"
    },
    ringStates: {
        ACCEPTED: "ACCEPTED",
        CANCELLED: "CANCELLED",
        EXPIRED: "EXPIRED",
        REJECTED: "REJECTED",
        WAITING: "WAITING"
    },
    events: {
        CONVERSATION_INFO: "onConversationInfo",
        CONVERSATION_LIST: "onConversationList",
        MESSAGE: "onMessage",
        USER_INFO: "onUserInfo",
        USER_ID: "onUserId",
        CREATED: "onCreated",
        TTR: "onTTRUpdated",
        RING: "onRingUpdate",
        ROUTING: "onRoutingUpdate",
        ECHO: "onMessageEcho",
        CHAT_STATE: "onChatState",
        SESSION_INVALIDATED: "onSessionInvalidated",
        CONNECTED: "onSocketConnected",
        INITIALIZED: "onSocketInitialized",
        CLOSED: "onSocketClosed",
        QUERY_RESPONSE: "onQueryResponse",
        SUBSCRIBE_MESSAGING_RESPONSE: "onSubscribeMessagingResponse",
        BRAND_PROFILE: "onBrandProfile",
        BRANDS: "onBrands",
        SUBSCRIBE_CONVERSATIONS: "onSubscribeConversations",
        SUBSCRIBE_EX_CONVERSATIONS: "onSubscribeExConversations",
        EVENT_PUBLISHED: "onEventPublished",
        CONVERSATION_NOTIFICATION: "onConversationNotification",
        EX_CONVERSATION_NOTIFICATION: "onExConversationNotification",
        EVENT_NOTIFICATION: "onEventNotification",
        SERVICE_ISSUE: "onServiceNonResponsive",
        AUTHENTICATION_ERROR: "onAuthenticationError",
        PING_SUCCESS: "onPingSuccess",
        MSG_RECEIVE: "onMessageReceive"
    },
    UMSApiEvents: {
        CONVERSATION_STATE: "onConversationState",
        CONVERSATION_LIST: "onConversationList",
        TTR: "onTTRUpdated",
        CSAT: "onCSATUpdated",
        DELETE_SUBSCRIBE_FROM_CONVERSATION: "onDeletedSubscriptionFromConversation",
        PARTICIPANT_JOINED: "onParticipantJoined",
        PARTICIPANT_LEFT: "onParticipantLeft",
        CONTENT: "onContent",
        message: "onMessage",
        messageState: "onMessageState",
        dialogUpdated: "onDialogUpdated",
        dialogChatState: "onDialogChatStateChanged"
    },
    effectiveTTRTypes: {
        normal: "NORMAL",
        urgent: "URGENT",
        prioritized: "PRIORITIZED",
        custom: "CUSTOM"
    },
    messageKinds: {
        REQUEST: "req",
        RESPONSE: "resp",
        NOTIFICATION: "notification"
    },
    requests: {
        GET_CLOCK: ".GetClock",
        GET_BRANDS: ".ams.brandprofile.GetBrands",
        GET_BRAND_PROFILE: ".ams.brandprofile.GetBrandProfile",
        SET_BRAND_PROFILE: ".ams.brandprofile.SetBrandProfile",
        REQUEST_CONVERSATION_AGENT: ".ams.cm.AgentRequestConversation",
        REQUEST_CONVERSATION_CONSUMER: ".ams.cm.ConsumerRequestConversation",
        SUBSCRIBE_CONVERSATIONS: ".ams.aam.SubscribeExConversations",
        UNSUBSCRIBE_CONVERSATIONS: ".ams.aam.UnsubscribeExConversations",
        UPDATE_CONVERSATIONS_SUBSCRIPTION: ".ams.aam.UpdateExConversationSubscription",
        UPDATE_CONVERSATION: ".ams.cm.UpdateConversationField",
        PUBLISH_EVENT: ".ams.ms.PublishEvent",
        QUERY_MESSAGES: ".ams.ms.QueryMessages",
        UPDATE_RING_STATE: ".ams.routing.UpdateRingState",
        SUBSCRIBE_ROUTING_TASKS: ".ams.routing.SubscribeRoutingTasks",
        UPDATE_ROUTING_SUBSCRIPTION: ".ams.routing.UpdateRoutingTaskSubscription",
        SET_USER_PROFILE: ".ams.userprofile.SetUserProfile",
        GET_USER_PROFILE: ".ams.userprofile.GetUserProfile",
        GENERATE_UPLOAD_TOKEN: ".ams.ms.token.GenerateUploadToken",
        GENERATE_DOWNLOAD_TOKEN: ".ams.ms.token.GenerateDownloadToken",
        SET_AGENT_STATUS: ".ams.routing.SetAgentState",
        GENERATE_UPLOAD_FILE_URL: ".ams.ms.GenerateURLForUploadFile",
        SUBSCRIBE_AGENT_STATUS: ".ams.routing.SubscribeAgentsState",
        AGENT_SESSION_START: ".ams.routing.AgentSessionStart",
        AGENT_SESSION_END: ".ams.routing.AgentSessionEnd"
    },
    requestsV3: {
        GET_CLOCK: "GetClock",
        GET_BRAND_PROFILE: "brandprofile.GetBrandProfile",
        SET_BRAND_PROFILE: "brandprofile.SetBrandProfile",
        REQUEST_CONVERSATION_AGENT: "cm.AgentRequestConversation",
        REQUEST_CONVERSATION_CONSUMER: "cm.ConsumerRequestConversation",
        SUBSCRIBE_CONVERSATIONS: "cqm.SubscribeExConversations",
        UNSUBSCRIBE_CONVERSATIONS: "cqm.UnsubscribeExConversations",
        UPDATE_CONVERSATIONS_SUBSCRIPTION: "cqm.UpdateExConversationSubscription",
        UPDATE_CONVERSATION: "cm.UpdateConversationField",
        PUBLISH_EVENT: "ms.PublishEvent",
        UPDATE_RING_STATE: "rs.UpdateRingState",
        SUBSCRIBE_ROUTING_TASKS: "rs.SubscribeRoutingTasks",
        SET_USER_PROFILE: "userprofile.SetUserProfile",
        GET_USER_PROFILE: "userprofile.GetUserProfile",
        GENERATE_UPLOAD_TOKEN: "ms.GenerateUploadToken",
        GENERATE_DOWNLOAD_TOKEN: "ms.GenerateDownloadToken",
        SET_AGENT_STATUS: "rs.SetAgentState",
        SUBSCRIBE_AGENT_STATUS: "rs.SubscribeAgentsState",
        INIT_CONNECTION: "InitConnection",
        SUBSCRIBE_MESSAGING_EVENTS: "ms.SubscribeMessagingEvents",
        GENERATE_UPLOAD_FILE_URL: "ms.GenerateURLForUploadFile",
        GENERATE_DOWNLOAD_FILE_URL: "ms.GenerateURLForDownloadFile"
    },
    headers: {
        CONSUMER_AUTHENTICATION: ".ams.headers.ConsumerAuthentication",
        CLIENT_PROPERTIES: ".ams.headers.ClientProperties"
    },
    eventTypes: {
        CHAT_STATE: "ChatStateEvent",
        ACCEPT_STATUS: "AcceptStatusEvent",
        CONTENT: "ContentEvent",
        RICH_CONTENT: "RichContentEvent"
    },
    conversationFields: {
        CSAT_RATE: "CSATRate",
        CONVERSATION_STATE: "ConversationStateField",
        STAGE: "Stage",
        DELAY: "DelayField",
        MANUAL_ETTR: "ManualETTR",
        NOTE: "Note",
        PARTICIPANTS_CHANGE: "ParticipantsChange",
        DIALOG_CHANGE: "DialogChange",
        TTR: "TTRField",
        TOPIC: "TopicField",
        SKILL: "Skill",
        CONVERSATION_HANDLER: "ConversationHandler"
    },
    responses: {
        GET_CLOCK: ".GetClock$Response",
        GET_USER_PROFILE: ".ams.userprofile.GetUserProfile$Response",
        ".ams.brandprofile.GetBrands$Response": "onBrands",
        ".ams.brandprofile.GetBrandProfile$Response": "onBrandProfile",
        ".ams.aam.SubscribeExConversations$Response": "onSubscribeExConversations",
        ".ams.ms.PublishEvent$Response": "onEventPublished",
        ".ams.ms.QueryMessages$Response": "onQueryResponse"
    },
    responsesV3: {
        GET_CLOCK: "GetClockResponse",
        GET_USER_PROFILE: "userprofile.GetUserProfileResponse",
        "brandprofile.GetBrandProfileResponse": "onBrandProfile",
        "cqm.SubscribeExConversationsResponse": "onSubscribeExConversations",
        "ms.SubscribeMessagingResponse": "onSubscribeMessagingResponse",
        "ms.PublishEventResponse": "onEventPublished",
        "ms.GenerateURLResponse": "onFileUrlCreated"
    },
    notifications: {
        ".ams.aam.ExConversationChangeNotification": "onExConversationNotification",
        ".ams.cm.ConversationChangeNotification": "onConversationNotification",
        ".ams.ms.OnlineEventDistribution": "onEventNotification",
        ".ams.routing.RoutingTaskNotification": "onRoutingUpdate",
        ".ams.routing.RingUpdated": "onRingUpdate"
    },
    notificationsV3: {
        "cqm.ExConversationChangeNotification": "onExConversationNotification",
        "cm.ConversationChangeNotification": "onConversationNotification",
        "ms.MessagingEventNotification": "onQueryResponse",
        "rs.RoutingTaskNotification": "onRoutingUpdate",
        ".ams.routing.RingUpdated": "onRingUpdate"
    },
    delayTypes: {
        HOLIDAY: "HOLIDAY",
        NIGHT: "NIGHT",
        WEEKEND: "WEEKEND"
    },
    authenticationErrors: [1008, 4407, 4401],
    participant: {
        roles: {
            ASSIGNED_AGENT: "ASSIGNED_AGENT",
            AGENT: "AGENT",
            CONSUMER: "CONSUMER",
            MANAGER: "MANAGER",
            READER: "READER",
            CONTROLLER: "CONTROLLER"
        }
    },
    fieldsChangeTypes: {
        ADD: "ADD",
        REMOVE: "REMOVE",
        UPDATE: "UPDATE",
        SUGGEST: "SUGGEST"
    },
    contentType: {
        ContentEvent: "message",
        AcceptStatusEvent: "messageState",
        ChatStateEvent: "dialogChatState",
        RichContentEvent: "richMessage"
    },
    contentEvents: {
        message: "onMessage",
        messageState: "onMessageState",
        dialogChatState: "onDialogChatStateChanged"
    },
    messageContentType: {
        secureForm: "forms/secure-invitation",
        secureFormSubmission: "forms/secure-submission"
    },
    RECOVERY_POLICY: {
        STRICT: "strict",
        MODERATE: "moderate"
    },
    EVENT_EMITTER_EVENTS: {
        ON_THROTTLED_BY_SERVER: "onThrottledByServer"
    }
});
window.lpTag = window.lpTag || {};
lpTag.AMSEventEmitter = lpTag.AMSEventEmitter || function() {
    function a(a, b) {
        this.events[a] instanceof Array || (this.events[a] = []);
        this.events[a].push(b)
    }

    function b(a, b) {
        this.events[a] instanceof Array && void 0 === b && (this.events[a] = [])
    }

    function c(a, b) {
        if (this.events[a] instanceof Array) {
            var c = this.events[a].indexOf(b);
            c > -1 && this.events[a].splice(c, 1)
        }
    }

    function d(a, b) {
        var c = [].slice.call(arguments, 1);
        if (this.events[a] instanceof Array)
            for (var d = this.events[a].slice(), e = d.length, f = 0; e > f; f += 1) d[f].apply(this, c)
    }

    function e(a, b) {
        this.on(a, function c() {
            this.removeListener(a, c);
            b.apply(this, arguments)
        })
    }
    this.events = {};
    this.on = a;
    this.clearAllListeners = b;
    this.off = c;
    this.emit = d;
    this.once = e
};
window.lpTag = window.lpTag || {};
lpTag.AMSUtils = lpTag.AMSUtils || function() {
    function a(a, b, d) {
        try {
            "function" == typeof a && a.call(d || null, b)
        } catch (e) {
            c("Error executing callback", "runCallBack")
        }
    }

    function b(a, b, c) {
        window.lpTag && window.lpTag.log && window.lpTag.log(c + ": " + a, b, x)
    }

    function c(a, c) {
        b(a, z.ERROR, c)
    }

    function d(a, c) {
        b(a, z.DEBUG, c)
    }

    function e(a, c) {
        b(a, z.INFO, c)
    }

    function f(a, b) {
        for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]);
        return a
    }

    function g(a, b) {
        var c = {};
        for (var d in b) c[d] = h(a, b[d]);
        return c
    }

    function h(a, b) {
        for (var c = b.split("."), d = a, e = 0; e < c.length; e++) {
            if (void 0 === d || null === d || void 0 === d[c[e]] || null === d[c[e]]) {
                d = null;
                break
            }
            d = d[c[e]]
        }
        return d
    }

    function i(a) {
        var b = [];
        for (var c in a) a.hasOwnProperty(c) && b.push(a[c]);
        return b
    }

    function j(b, c) {
        var d = !0;
        for (var e in b)
            if (b.hasOwnProperty(e)) {
                d = l(c[e], b[e].type, b[e].expected, b[e].optional);
                if (!d) break
            }
        d || a(c && c.error, {
            error: "failed validation on key: " + e,
            statusCode: 400
        }, c.context);
        return d
    }

    function k(a) {
        return a.dialogId || a.conversationId
    }

    function l(a, b, c, d) {
        return !0 === d && void 0 === a || (b === y.CUSTOM ? a === c : b === y.ARRAY ? a && a.constructor === Array : b === y.ENUM ? m(a, c) : typeof a === b)
    }

    function m(a, b) {
        for (var c in b)
            if (b.hasOwnProperty(c) && b[c] === a) return !0;
        return !1
    }

    function n(a, b) {
        var c;
        for (var d in b)
            if (b.hasOwnProperty(d) && l(b[d], y.STRING) || l(b[d], y.NUMBER)) {
                c = new RegExp("{{" + d + "}}", "i");
                a = a.replace(c, b[d])
            }
        return a
    }

    function o(a, b) {
        if (l(a, y.ARRAY))
            for (var c = 0; c < a.length; c++) l(a[c], y.STRING) && (a[c] = n(a[c], b));
        else l(a, y.STRING) && (a = n(a, b));
        return a
    }

    function p() {
        return "tttttttt-tttt-4ttt-fttt-t7ttttttttttt".replace(/[tf]/g, function(a) {
            var b = 16 * Math.random() | 0;
            return ("t" == a ? b : 3 & b | 8).toString(16)
        }) + "-" + Math.floor(1e5 * Math.random())
    }

    function q(a, b) {
        var c = null === a && null === b,
            d = a === b,
            e = typeof a == typeof b,
            f = e && void 0 === a,
            g = e && "function" == typeof a && "" + a == "" + b,
            h = e && "object" == typeof a && null !== a && null !== b,
            i = h && Object.keys(a).length === Object.keys(b).length;
        return c || f || d || g || i && r(a, b)
    }

    function r(a, b) {
        var c = !0;
        for (var d in a) {
            a.hasOwnProperty(d) && b.hasOwnProperty(d) && (c = "object" == typeof a[d] && null !== a[d] && a[d].constructor === Array ? s(a[d]) === s(b[d]) : q(a[d], b[d]));
            if (!c) break
        }
        return c
    }

    function s(a) {
        var b, c;
        if ("function" == typeof Array.prototype.toJSON) {
            c = Array.prototype.toJSON;
            delete Array.prototype.toJSON;
            try {
                b = JSON.stringify(a)
            } catch (d) {
                Array.prototype.toJSON = c;
                throw d
            }
            Array.prototype.toJSON = c
        } else b = JSON.stringify(a);
        return b
    }

    function t(a) {
        try {
            return JSON.parse(s(a))
        } catch (b) {
            lpTag.log("unable to clone object:" + JSON.stringify(b), "ERROR", x);
            return
        }
    }

    function u(a, b, c) {
        var d;
        if (!a || "object" != typeof a) return a;
        if (!b) return t(a);
        d = b || a.constructor() || {};
        for (var e in a) d[e] !== a[e] && a.hasOwnProperty(e) && (d[e] = c ? u(a[e], void 0, c) : a[e]);
        return d
    }

    function v(a) {
        for (var b in a)
            if (a.hasOwnProperty(b)) return !1;
        return !0
    }

    function w(a, b) {
        function c(a, b, c) {
            var d = new RegExp("([?&])" + b + "=.*?(&|$)", "i"),
                e = -1 !== a.indexOf("?") ? "&" : "?";
            return a.match(d) ? a.replace(d, "$1" + b + "=" + c + "$2") : a + e + b + "=" + c
        }
        var d = b && b.queryParameters || null;
        if (d && a)
            for (var e in d) e && d[e] && (a = c(a, e, d[e]));
        return a
    }
    var x = "AMSUtils",
        y = {
            BOOL: "boolean",
            STRING: "string",
            ARRAY: "Array",
            NUMBER: "number",
            OBJECT: "object",
            CUSTOM: "custom",
            ENUM: "enum"
        },
        z = {
            DEBUG: "DEBUG",
            INFO: "INFO",
            ERROR: "ERROR"
        };
    return {
        validationTypes: y,
        runCallBack: a,
        isSameObject: q,
        isEmpty: v,
        cloneExtend: u,
        clone: t,
        stringify: s,
        existsInEnum: m,
        validateCondition: l,
        validateConditions: j,
        getDialogIdFromMessageRequest: k,
        getProperty: h,
        getValues: i,
        remodel: g,
        templateStrings: o,
        addQueryParameters: w,
        overRideMerge: f,
        error: c,
        debug: d,
        info: e,
        log: b,
        getUID: p
    }
};
window.lpTag = window.lpTag || {};
lpTag.AMSTransport = lpTag.AMSTransport || function(a) {
    function b(a) {
        v = a || {};
        v.connectorId = a.connectorId || G.connectorId;
        v.pollingInterval = a.pollingInterval || G.pollingInterval;
        v.apiVersion = a.apiVersion || G.apiVersion;
        v.idpVersion = a.idpVersion || v.connectorId !== G.connectorId ? G.idpVersionWithConnector : G.idpVersion;
        v.autoReconnect = a.autoReconnect || G.autoReconnect;
        v.reconnectTimeout = a.reconnectTimeout || G.reconnectTimeout;
        v.onAuthenticationError = a.onAuthenticationError;
        v.maxReconnectAttempt = a.maxReconnectAttempt || G.maxReconnectAttempt;
        v.idleBeforePing = a.idleBeforePing || G.idleBeforePing;
        v.memberType = a.memberType && E[a.memberType] || G.memberType;
        v.noWS = "boolean" == typeof a.noWS && a.noWS;
        v.onSocketCreated = a.onSocketCreated || null;
        v.restRecoveryPolicy === D.RECOVERY_POLICY.MODERATE && (K.enabled = !0);
        x = "lpMessaging-" + v.accountId;
        if (v.token || v.memberType !== E.VISITOR) j();
        else {
            w = new window.lpTag.utils.SessionDataAsyncWrapper(v.storageConf || {});
            w.getSessionData(x, l, l)
        }
    }

    function c(a) {
        f() ? t.send(a) : q(a)
    }

    function d() {
        if (f()) t.dispose();
        else {
            clearTimeout(u);
            s()
        }
        w && w.removeSessionData(x)
    }

    function e() {
        return !f() || t.connected()
    }

    function f() {
        return !v.noWS && t && t.supported
    }

    function g() {
        return v && v.token
    }

    function h(a) {
        if (a && v.historyDomain) {
            k();
            var b;
            switch (a.type) {
                case F.CONVERSATIONS:
                    b = H.historyConversations;
                    break;
                case F.MESSAGES:
                    b = H.historyMessages;
                    break;
                case F.FILE:
                    b = H.fileSharing
            }
            if (b) {
                var c = {
                    method: "GET",
                    url: A.addQueryParameters(A.templateStrings(b, v), a),
                    headers: {
                        Authorization: "Bearer " + g()
                    },
                    success: a.success,
                    error: a.error
                };
                B.issueCall(c)
            }
        }
    }

    function i(a) {
        if (a && a.skillId) {
            k();
            var b = A.templateStrings(H.shiftStatus, v),
                c = {
                    method: "GET",
                    url: A.templateStrings(b, a),
                    headers: {
                        Authorization: "Bearer " + g()
                    },
                    success: a.success,
                    error: a.error
                };
            B.issueCall(c)
        }
    }

    function j() {
        if (!v.noWS) {
            var a = 3 === v.apiVersion ? H.wsV3Path : H.wsPath,
                b = A.templateStrings(a, v),
                c = 3 === v.apiVersion ? b : A.addQueryParameters(b, v);
            t = new lpTag.taglets.LPWebSocketWrapper({
                ping: v.ping,
                idleBeforePing: v.idleBeforePing,
                server: c,
                message: v.message,
                closed: n(v.closed),
                created: v.created,
                autoReconnect: v.autoReconnect,
                reconnectTimeout: v.reconnectTimeout,
                maxReconnectAttempt: v.maxReconnectAttempt
            })
        }
        if (!t || !t.supported) {
            C = !0;
            k();
            r(v.restCallback)
        }
    }

    function k() {
        var b = {
            frames: [{
                url: A.templateStrings(H.postMessage, v)
            }]
        };
        a.IDPDomain && b.frames.push({
            url: A.templateStrings(H.postMessageIDP, v)
        });
        a.historyDomain && b.frames.push({
            url: A.templateStrings(H.postMessageHistory, v)
        });
        B.configure(b)
    }

    function l(b) {
        if (b && b.token && b.authCode === a.authCode) {
            v.token = b.token;
            j()
        } else m(j)
    }

    function m(b) {
        k();
        var c;
        if (a.connectorsSfConfig && a.connectorsSfConfig.connectorsJwt) {
            v.token = a.connectorsSfConfig.connectorsJwt;
            A.runCallBack(b)
        } else if (a.authType === I.STEP_UP) {
            var d = a.authCode;
            v.token = d;
            w.setSessionData(x, {
                token: d
            });
            A.runCallBack(b)
        } else {
            c = a.hasAuthentication ? a.authType === I.OAUTH_IMPLICIT || a.authType === I.OAUTH_CODE ? H.authenticateConsumerIDP : H.authenticateConsumerOldIDP : H.anonymousConsumerIDP;
            var e = {
                url: v.IDPDomain ? A.templateStrings(c, v) : A.templateStrings(H.consumerTokenCreation, v),
                method: "POST",
                success: function(c) {
                    c && c.body && (v.token = c.body.token || c.body.jwt);
                    if (v.token) {
                        w.setSessionData(x, {
                            token: v.token,
                            authCode: a.authCode
                        });
                        A.runCallBack(b)
                    } else {
                        A.error("Error on _createToken: couldn't find token. data: " + JSON.stringify(c), y);
                        A.runCallBack(a.onAuthenticationError, null, c)
                    }
                },
                error: function(b) {
                    A.error("Error on _createToken. data: " + JSON.stringify(b), y);
                    A.runCallBack(a.onAuthenticationError, null, b)
                }
            };
            if (a.authCode) {
                var f = {};
                if (a.hasAuthentication && a.authType === I.OAUTH_IMPLICIT) f.id_token = a.authCode;
                else if (a.hasAuthentication && a.authType === I.OAUTH_CODE) {
                    f.code = a.authCode;
                    f.redirect_uri = a.redirect_uri
                } else f.authCode = a.authCode;
                e.data = f
            }
            B.issueCall(e)
        }
    }

    function n(a) {
        return function(b) {
            var c = b && (1008 === b.code || 4407 === b.code || 4401 === b.code),
                e = b && 1005 === b.code && "string" == typeof b.reason && b.reason.indexOf("identity token is invalid") > -1;
            if (c || e) {
                b.tokenIsInvalid = !0;
                d()
            }
            A.runCallBack(a, b)
        }
    }

    function o() {
        K.inProgress = !1;
        K.values = J
    }

    function p(b) {
        u && clearTimeout(u);
        if (C)
            if (b)
                if (K.enabled) {
                    K.inProgress = !0;
                    var c = K.values;
                    if (c.auth) {
                        c.auth = c.auth - 1;
                        A.error("Token has expired on rest call. data: " + JSON.stringify(b), y);
                        A.runCallBack(a.onSessionInvalidated, null, b)
                    } else if (c.stage1) {
                        c.stage1 = c.stage1 - 1;
                        u = setTimeout(r, v.pollingInterval)
                    } else if (c.stage2) {
                        c.stage2 = c.stage2 - 1;
                        u = setTimeout(r, c.stage2Interval)
                    } else o()
                } else u = setTimeout(r, v.pollingInterval);
        else {
            K.inProgress && o();
            u = setTimeout(r, v.pollingInterval)
        }
    }

    function q(a) {
        var b = {
            url: A.templateStrings(H.restPath, v),
            headers: {
                Authorization: g()
            },
            method: "POST",
            data: a,
            success: function(a) {
                if (a && a.body && a.body.length)
                    for (var b = 0; b < a.body.length; b++) {
                        var c = a.body[b];
                        if ("string" == typeof c) try {
                            c = JSON.parse(c)
                        } catch (d) {}
                        A.runCallBack(v.message, c)
                    }
                p()
            },
            error: function(a) {
                A.error("Error on _sendRestMessage" + JSON.stringify(a), y);
                p(a)
            }
        };
        B.issueCall(b)
    }

    function r(a) {
        clearTimeout(u);
        var b = {
            url: A.templateStrings(H.restPath, v),
            headers: {
                Authorization: g()
            },
            method: "GET",
            success: function(b) {
                if (b && b.body && b.body.length)
                    for (var c = 0; c < b.body.length; c++) {
                        var d = b.body[c];
                        A.runCallBack(v.message, d)
                    } else a && b ? a(b) : A.error("Error on _getMessages" + JSON.stringify(b), y);
                p()
            },
            error: function(a) {
                A.error("Error on _getMessages" + JSON.stringify(a), y);
                p(a)
            }
        };
        B.issueCall(b)
    }

    function s() {
        var a = {
            url: A.templateStrings(H.restPath, v),
            headers: {
                Authorization: g()
            },
            method: "DELETE",
            success: function(a) {
                A.runCallBack(v.closed, a)
            },
            error: function(a) {
                A.runCallBack(v.closed, a);
                A.error("Error on close connection" + JSON.stringify(a), y)
            }
        };
        C = !1;
        B.issueCall(a)
    }
    var t, u, v, w, x, y = "AMSTransports",
        z = "0.0.2",
        A = lpTag.AMSUtils(),
        B = lpTag.taglets && lpTag.taglets.postmessage,
        C = !1,
        D = A.clone(lpTag.AMSStatics),
        E = {
            AGENT: "brand",
            VISITOR: "consumer"
        },
        F = {
            CONVERSATIONS: "CONVERSATIONS",
            MESSAGES: "MESSAGES",
            FILE: "FILE"
        },
        G = {
            apiVersion: 2,
            idpVersion: 2,
            idpVersionWithConnector: 3,
            connectorId: "default",
            memberType: E.VISITOR,
            idleBeforePing: 6e4,
            autoReconnect: !0,
            reconnectTimeout: 5e3,
            maxReconnectAttempt: 100,
            pollingInterval: 2e3
        },
        H = {
            anonymousConsumerIDP: "https://{{IDPDomain}}/api/account/{{accountId}}/signup",
            authenticateConsumerOldIDP: "https://{{IDPDomain}}/api/account/{{accountId}}/authenticate",
            authenticateConsumerIDP: "https://{{IDPDomain}}/api/account/{{accountId}}/app/{{connectorId}}/authenticate?v={{idpVersion}}",
            consumerTokenCreation: "https://{{domain}}/api/account/{{accountId}}/messaging/management/consumer/token",
            historyConversations: "https://{{historyDomain}}/messaging_history/api/account/{{accountId}}/conversations/consumer/metadata/search",
            historyMessages: "https://{{historyDomain}}/messaging_history/api/account/{{accountId}}/conversations/conversation/content/search",
            fileSharing: "https://{{historyDomain}}/messaging_history/api/account/{{accountId}}/conversations/consumer/file-sharing",
            shiftStatus: "https://{{domain}}/api/account/{{accountId}}/skills/{{skillId}}/shift-status-skill",
            wsPath: "wss://{{domain}}/ws_api/account/{{accountId}}/messaging/{{memberType}}/{{token}}?v={{apiVersion}}",
            wsV3Path: "wss://{{domain}}/ws_api/account/{{accountId}}/messaging/{{memberType}}?v={{apiVersion}}",
            restPath: "https://{{domain}}/rest_api/account/{{accountId}}/messaging/{{memberType}}?v={{apiVersion}}",
            postMessage: "https://{{domain}}/postmessage/postmessage.min.html",
            postMessageHistory: "https://{{historyDomain}}/postmessage/postmessage.min.html",
            postMessageIDP: "https://{{IDPDomain}}/postmessage/postmessage.min.html"
        },
        I = {
            OAUTH_IMPLICIT: 1,
            OAUTH_CODE: 2,
            STEP_UP: 3
        },
        J = {
            auth: 1,
            stage1: 10,
            stage2: 6,
            stage2Interval: 1e4
        },
        K = {
            enabled: !1,
            inProgress: !1,
            values: J
        };
    a && b(a);
    this.sendMessage = c;
    this.configure = b;
    this.closeConnection = d;
    this.name = y;
    this.v = z;
    this.memberTypes = E;
    this.getToken = g;
    this.sendHistoryRequest = h;
    this.sendShiftStatusRequest = i;
    this.isConnected = e;
    this.isWebSocketConnection = f
};
window.lpTag = window.lpTag || {};
lpTag.AMSClient = lpTag.AMSClient || function(a) {
    function b(a) {
        if (a) {
            Ua = a.apiVersion || Ua;
            sa(a);
            _a.memberType = a.memberType || ib.memberTypes.USER;
            Ya = !0 === a.resendTimedOutRequests;
            db = a.retryTimeout || db;
            if (Ua >= 2) {
                a.queryParameters = a.queryParameters || {};
                a.queryParameters.integrationVersion = Ta
            }
            La() ? c(a) : la(a);
            a.throttlingSupportEnabled && (ob.enabled = !0);
            isNaN(a.throttlingTimeoutValue) || (ob.value = parseInt(a.throttlingTimeoutValue, 10))
        }
    }

    function c(a) {
        ma();
        a.onSocketCreated = ka.bind(this, a);
        la(a)
    }

    function d(a) {
        Oa && Oa.closeConnection && Oa.closeConnection();
        jb.unregister({
            appName: Sa
        });
        b(a)
    }

    function e() {
        return Ga(Ha(ib.requests.GET_CLOCK))
    }

    function f(a) {
        switch (a.kind) {
            case ib.messageKinds.NOTIFICATION:
                pa(a);
                break;
            case ib.messageKinds.RESPONSE:
                qa(a)
        }
    }

    function g(a) {
        if (hb.validateConditions({
                dialogId: {
                    type: hb.validationTypes.STRING
                },
                conversationId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = {
                dialogId: a.dialogId,
                conversationId: a.conversationId,
                event: {
                    type: ib.eventTypes.CONTENT,
                    contentType: a.contentType || "text/plain",
                    message: a.text,
                    quickReplies: a.quickReplies
                }
            };
            a.messageAudience && (b.messageAudience = a.messageAudience);
            var c = Ha(ib.requests.PUBLISH_EVENT, b, a.metadata);
            a.retryOnError = !0;
            return Ga(c, a)
        }
    }

    function h(a) {
        return hb.validateConditions({
            dialogId: {
                type: hb.validationTypes.STRING
            },
            conversationId: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.PUBLISH_EVENT, {
            dialogId: a.dialogId,
            conversationId: a.conversationId,
            event: {
                type: ib.eventTypes.CONTENT,
                contentType: a.contentType,
                message: {
                    formId: a.formId,
                    submissionId: a.submissionId,
                    invitationId: a.invitationId,
                    title: a.title
                }
            }
        }), a) : void 0
    }

    function i(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            },
            dialogId: {
                type: hb.validationTypes.STRING
            },
            json: {
                type: hb.validationTypes.OBJECT
            }
        }, a) ? Ga(Ha(ib.requests.PUBLISH_EVENT, {
            conversationId: a.conversationId,
            dialogId: a.dialogId,
            event: {
                type: ib.eventTypes.RICH_CONTENT,
                content: a.json,
                quickReplies: a.quickReplies
            }
        }, a.metadata), a) : void 0
    }

    function j(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(".ams.ms.GenerateURLForDownloadFile", {
            dialogId: a.conversationId,
            relativePath: a.pathUrl
        }), a) : void 0
    }

    function k(a) {
        return hb.validateConditions({
            dialogId: {
                type: hb.validationTypes.STRING
            },
            conversationId: {
                type: hb.validationTypes.STRING
            },
            chatState: {
                type: hb.validationTypes.ENUM,
                expected: ib.chatStates
            }
        }, a) ? Ga(Ha(ib.requests.PUBLISH_EVENT, {
            dialogId: a.dialogId,
            conversationId: a.conversationId,
            event: {
                type: ib.eventTypes.CHAT_STATE,
                chatState: a.chatState.toUpperCase()
            }
        }), a) : void 0
    }

    function l(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            },
            conversationState: {
                type: hb.validationTypes.ENUM,
                expected: ib.conversation.states
            }
        }, a) ? Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: a.field || ib.conversationFields.CONVERSATION_STATE,
                conversationState: a.conversationState || ib.conversation.states.CLOSE
            }
        }), a) : void 0
    }

    function m(a) {
        a.conversationState = ib.conversation.states.CLOSE;
        l(a)
    }

    function n(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            },
            userId: {
                type: hb.validationTypes.STRING
            },
            role: {
                type: hb.validationTypes.ENUM,
                expected: ib.participant.roles
            },
            changeType: {
                type: hb.validationTypes.ENUM,
                expected: ib.fieldsChangeTypes
            }
        }, a) ? Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: ib.conversationFields.PARTICIPANTS_CHANGE,
                type: a.changeType,
                userId: a.userId,
                role: a.role,
                dialogId: hb.getDialogIdFromMessageRequest(a)
            }
        }), a) : void 0
    }

    function o(a) {
        if (hb.validateConditions({
                conversationId: {
                    type: hb.validationTypes.STRING
                },
                authUserId: {
                    type: hb.validationTypes.STRING
                },
                unAuthUserId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = Ha(ib.requests.UPDATE_CONVERSATION, {
                conversationId: a.conversationId,
                conversationField: [{
                    field: ib.conversationFields.PARTICIPANTS_CHANGE,
                    type: ib.fieldsChangeTypes.REMOVE,
                    userId: a.unAuthUserId,
                    role: ib.participant.roles.CONSUMER
                }, {
                    field: ib.conversationFields.PARTICIPANTS_CHANGE,
                    type: ib.fieldsChangeTypes.ADD,
                    userId: a.authUserId,
                    role: ib.participant.roles.CONSUMER
                }]
            });
            Qa = b.id;
            return Ga(b, a)
        }
    }

    function p(a) {
        if (hb.validateConditions({
                ownerId: {
                    type: hb.validationTypes.STRING
                },
                conversationId: {
                    type: hb.validationTypes.STRING
                },
                skillId: {
                    type: hb.validationTypes.STRING
                },
                accountId: {
                    type: hb.validationTypes.STRING,
                    optional: !0
                }
            }, a)) {
            var b = [];
            a.accountId && "" !== a.accountId && b.push({
                field: ib.conversationFields.CONVERSATION_HANDLER,
                accountId: a.accountId
            });
            a.ownerId && "" !== a.ownerId && b.push({
                field: ib.conversationFields.PARTICIPANTS_CHANGE,
                type: ib.fieldsChangeTypes.REMOVE,
                userId: a.ownerId,
                role: ib.participant.roles.ASSIGNED_AGENT,
                dialogId: hb.getDialogIdFromMessageRequest(a)
            });
            b.push({
                field: ib.conversationFields.SKILL,
                type: ib.fieldsChangeTypes.UPDATE,
                skill: a.skillId
            });
            return Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
                conversationId: a.conversationId,
                conversationField: b
            }), a)
        }
    }

    function q(a) {
        if (hb.validateConditions({
                conversationId: {
                    type: hb.validationTypes.STRING,
                    optional: !1
                },
                dialogId: {
                    type: hb.validationTypes.STRING,
                    optional: !1
                },
                ownerId: {
                    type: hb.validationTypes.STRING,
                    optional: !0
                },
                ownerRole: {
                    type: hb.validationTypes.ENUM,
                    optional: !0,
                    expected: ib.participant.roles
                },
                suggestedAgentId: {
                    type: hb.validationTypes.STRING,
                    optional: !1
                },
                skillId: {
                    type: hb.validationTypes.STRING,
                    optional: !0
                }
            }, a)) {
            var b = [{
                field: ib.conversationFields.PARTICIPANTS_CHANGE,
                type: ib.fieldsChangeTypes.SUGGEST,
                userId: a.suggestedAgentId,
                role: ib.participant.roles.ASSIGNED_AGENT
            }];
            a.ownerId && a.ownerRole && b.push({
                field: ib.conversationFields.PARTICIPANTS_CHANGE,
                type: ib.fieldsChangeTypes.REMOVE,
                userId: a.ownerId,
                role: a.ownerRole
            });
            a.skillId && b.push({
                field: ib.conversationFields.SKILL,
                type: ib.fieldsChangeTypes.UPDATE,
                skill: a.skillId
            });
            return Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
                conversationId: a.conversationId,
                dialogId: a.dialogId,
                conversationField: b
            }), a)
        }
    }

    function r(a) {
        if (hb.validateConditions({
                ownerId: {
                    type: hb.validationTypes.STRING
                },
                conversationId: {
                    type: hb.validationTypes.STRING
                },
                agentId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = [],
                c = hb.getDialogIdFromMessageRequest(a);
            a.ownerId && "" !== a.ownerId && b.push({
                field: ib.conversationFields.PARTICIPANTS_CHANGE,
                type: ib.fieldsChangeTypes.REMOVE,
                userId: a.ownerId,
                role: ib.participant.roles.ASSIGNED_AGENT,
                dialogId: c
            });
            b.push({
                field: ib.conversationFields.PARTICIPANTS_CHANGE,
                type: ib.fieldsChangeTypes.UPDATE,
                userId: a.agentId || "",
                role: ib.participant.roles.ASSIGNED_AGENT,
                dialogId: c
            });
            return Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
                conversationId: a.conversationId,
                conversationField: b
            }), a)
        }
    }

    function s(a) {
        a.role = ib.participant.roles.ASSIGNED_AGENT;
        a.changeType = ib.fieldsChangeTypes.REMOVE;
        return n(a)
    }

    function t(a) {
        if (hb.validateConditions({
                userId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = {};
            a && a.userId && (b.userId = a.userId);
            return Ga(Ha(ib.requests.GET_USER_PROFILE, b), a)
        }
    }

    function u(a) {
        return Ga(Ha(ib.requests.GET_USER_PROFILE), a)
    }

    function v(a, b) {
        return Ga(Ha(ib.requests.GENERATE_UPLOAD_TOKEN, b), a)
    }

    function w(a) {
        return Ga(Ha(ib.requests.GENERATE_DOWNLOAD_TOKEN, {
            downloadable: {
                type: "SecureForm",
                dialogId: a.dialogId,
                submissionId: a.submissionId,
                invitationId: a.invitationId
            }
        }), a)
    }

    function x(a) {
        if (hb.validateConditions({
                agentUserId: {
                    type: hb.validationTypes.STRING
                },
                availability: {
                    type: hb.validationTypes.STRING
                },
                isBlended: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = ib.requests.SET_AGENT_STATUS,
                c = a.metadata,
                d = {
                    channels: ["MESSAGING"]
                };
            d.agentUserId = a.agentUserId;
            d.availability = a.availability;
            d.isBlended = a.isBlended;
            return Ga(Ha(b, d, c), a)
        }
    }

    function y(a) {
        if (hb.validateConditions({
                agentUserId: {
                    type: hb.validationTypes.STRING
                },
                isBlended: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = ib.requests.AGENT_SESSION_START,
                c = a.metadata,
                d = {
                    channels: ["MESSAGING"]
                };
            d.agentUserId = a.agentUserId;
            d.isBlended = a.isBlended;
            return Ga(Ha(b, d, c), a)
        }
    }

    function z(a) {
        if (hb.validateConditions({
                agentUserId: {
                    type: hb.validationTypes.STRING
                },
                isBlended: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = ib.requests.AGENT_SESSION_END,
                c = a.metadata,
                d = {
                    channels: ["MESSAGING"]
                };
            d.agentUserId = a.agentUserId;
            d.isBlended = a.isBlended;
            return Ga(Ha(b, d, c), a)
        }
    }

    function A(a) {
        if (hb.validateConditions({
                brandId: {
                    type: hb.validationTypes.STRING
                },
                agentId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = ib.requests.SUBSCRIBE_AGENT_STATUS,
                c = {};
            c.brandId = a.brandId;
            c.agentId = a.agentId;
            c.agentAvailability = "";
            return Ga(Ha(b, c), a)
        }
    }

    function B(a) {
        var b = {
            userId: {
                type: hb.validationTypes.STRING,
                optional: !1
            },
            firstName: {
                type: hb.validationTypes.STRING,
                optional: !0
            },
            lastName: {
                type: hb.validationTypes.STRING,
                optional: !0
            },
            avatarUrl: {
                type: hb.validationTypes.STRING,
                optional: !0
            },
            email: {
                type: hb.validationTypes.STRING,
                optional: !0
            },
            phone: {
                type: hb.validationTypes.STRING,
                optional: !0
            },
            backgndImgUri: {
                type: hb.validationTypes.STRING,
                optional: !0
            }
        };
        return hb.validateConditions(b, a) ? Ga(Ha(ib.requests.SET_USER_PROFILE, {
            firstName: a.firstName,
            lastName: a.lastName,
            userId: a.userId,
            avatarUrl: a.avatarUrl,
            backgndImgUri: a.backgndImgUri,
            role: ib.participant.roles.CONSUMER,
            privateData: {
                mobileNum: a.phone,
                mail: a.email
            }
        }), a) : void 0
    }

    function C(a) {
        return hb.validateConditions({
            firstName: {
                type: hb.validationTypes.STRING
            },
            lastName: {
                type: hb.validationTypes.STRING
            },
            userId: {
                type: hb.validationTypes.STRING
            },
            avatarUrl: {
                type: hb.validationTypes.STRING
            },
            email: {
                type: hb.validationTypes.STRING
            },
            phone: {
                type: hb.validationTypes.NUMBER
            },
            apns: {
                type: hb.validationTypes.STRING
            },
            certName: {
                type: hb.validationTypes.STRING
            },
            token: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.SET_USER_PROFILE, {
            firstName: a.firstName,
            lastName: a.lastName,
            userId: a.userId,
            authenticatedData: a.authenticatedData,
            avatarUrl: a.avatarUrl,
            role: a.role || ib.participant.roles.ASSIGNED_AGENT,
            backgndImgUri: a.backgndImgUri,
            description: a.description,
            privateData: {
                mobileNum: a.phone,
                mail: a.email,
                pushNotificationData: {
                    serviceName: a.apns,
                    certName: a.certName,
                    token: a.token
                }
            }
        }), a) : void 0
    }

    function D(a) {
        function b() {
            return a && a.campaignInfo && a.campaignInfo.campaignId && a.campaignInfo.engagementId ? {
                campaignId: a.campaignInfo.campaignId,
                engagementId: a.campaignInfo.engagementId
            } : null
        }

        function c() {
            return a && a.conversationContext && a.conversationContext.subscription ? [{
                type: "NetworkEffect",
                contentProviderAccountId: a.conversationContext.subscription.provideraccountid,
                conversationOwnerId: a.conversationContext.subscription.conversationowneraccountid,
                referenceId: a.conversationContext.subscription.referenceid
            }] : null
        }
        var d, e, f;
        a = a || {};
        var g = {
                skillId: a.skillId || "-1",
                channelType: a.channelType || ib.channelTypes.MESSAGING,
                ttrDefName: null,
                campaignInfo: b()
            },
            h = c();
        switch (_a.memberType) {
            case ib.memberTypes.USER:
                if (La() || hb.validateConditions({
                        brandId: {
                            type: hb.validationTypes.STRING
                        }
                    }, a)) {
                    d = ib.requests.REQUEST_CONVERSATION_CONSUMER;
                    g.brandId = a.brandId;
                    g.skillId = a.skillId || "-1";
                    g.channelType = a.channelType;
                    g.conversationContext = {
                        visitorId: a.conversationContext.visitorId,
                        sessionId: a.conversationContext.sessionId,
                        interactionContextId: a.conversationContext.interactionContextId,
                        type: a.conversationContext.type,
                        lang: a.conversationContext.lang
                    }
                }
                break;
            case ib.memberTypes.AGENT:
                if (hb.validateConditions({
                        consumerId: {
                            type: hb.validationTypes.STRING
                        }
                    }, a)) {
                    d = ib.requests.REQUEST_CONVERSATION_AGENT;
                    g.consumerId = a.consumerId;
                    g.conversationContext = {
                        type: "ProactiveContext",
                        originConversationId: a.conversationId,
                        originConversationContext: a.originContext
                    };
                    e = a.originContext && a.originContext.lang;
                    f = a.lang || e;
                    f && (g.conversationContext.lang = f)
                }
        }
        return d ? Ga(Ha(d, g, h), a) : void 0
    }

    function E(a) {
        if (hb.validateConditions({
                brandId: {
                    type: hb.validationTypes.STRING
                },
                agentId: {
                    type: hb.validationTypes.STRING
                }
            }, a) && hb.validateConditions({
                memberType: {
                    type: hb.validationTypes.CUSTOM,
                    expected: ib.memberTypes.AGENT
                }
            }, _a)) {
            var b = Ha(ib.requests.SUBSCRIBE_ROUTING_TASKS, {
                brandId: a.brandId,
                agentId: a.agentId,
                channelType: ib.channelTypes.MESSAGING
            });
            a.skillId && (b.body.skillId = a.skillId);
            a.conversationId && (b.body.conversationId = a.conversationId);
            return Ga(b, a)
        }
    }

    function F(a) {
        if (hb.validateConditions({
                subscriptionId: {
                    type: hb.validationTypes.STRING
                },
                brandId: {
                    type: hb.validationTypes.STRING
                },
                agentId: {
                    type: hb.validationTypes.STRING
                }
            }, a) && hb.validateConditions({
                memberType: {
                    type: hb.validationTypes.CUSTOM,
                    expected: ib.memberTypes.AGENT
                }
            }, _a)) {
            var b = Ha(ib.requests.UPDATE_ROUTING_SUBSCRIPTION, {
                subscriptionId: a.brandId,
                brandId: a.brandId,
                agentId: a.agentId
            });
            a.skillId && (b.body.skillId = a.skillId);
            a.conversationId && (b.body.conversationId = a.conversationId);
            a.channelType && (b.body.channelType = a.channelType);
            return Ga(b, a)
        }
    }

    function G(a) {
        return hb.validateConditions({
            ringId: {
                type: hb.validationTypes.STRING
            }
        }, a) && hb.validateConditions({
            memberType: {
                type: hb.validationTypes.CUSTOM,
                expected: ib.memberTypes.AGENT
            }
        }, _a) ? Ga(Ha(ib.requests.UPDATE_RING_STATE, {
            ringId: a.ringId,
            ringState: "ACCEPTED"
        }), a) : void 0
    }

    function H(a) {
        return hb.validateConditions({
            ringId: {
                type: hb.validationTypes.STRING
            }
        }, a) && hb.validateConditions({
            memberType: {
                type: hb.validationTypes.CUSTOM,
                expected: ib.memberTypes.AGENT
            }
        }, _a) ? Ga(Ha(ib.requests.UPDATE_RING_STATE, {
            ringId: a.ringId,
            ringState: "REJECTED"
        }), a) : void 0
    }

    function I(a) {
        if (hb.validateConditions({
                dialogId: {
                    type: hb.validationTypes.STRING
                },
                conversationId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = Ha(ib.requests.SUBSCRIBE_MESSAGING_EVENTS, {
                dialogId: a.dialogId,
                conversationId: a.conversationId,
                fromSeq: a.fromSeq || 0
            });
            lb[b.id] = a.dialogId;
            nb.push(a.dialogId);
            return Ga(b, a)
        }
    }

    function J(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            },
            dialogId: {
                type: hb.validationTypes.STRING
            }
        }, a) ? oa(a, {
            maxQuantity: a.maxQuantity || Va,
            olderThan: a.olderThan,
            newerThan: a.newerThan
        }) : void 0
    }

    function K(a) {
        if (hb.validateConditions({
                conversationId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = a.maxQuantity || Va,
                c = a.lastId || b,
                d = c - b;
            0 > d && (d = 0);
            return oa(a, {
                maxQuantity: b,
                olderThan: c,
                newerThan: d
            })
        }
    }

    function L(a) {
        if (hb.validateConditions({
                conversationId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = a.maxQuantity || Va,
                c = a.lastId || 0;
            return oa(a, {
                maxQuantity: b,
                olderThan: c + b,
                newerThan: c
            })
        }
    }

    function M(a) {
        a.state = a.state.toUpperCase();
        if (hb.validateConditions({
                dialogId: {
                    type: hb.validationTypes.STRING
                },
                conversationId: {
                    type: hb.validationTypes.STRING
                },
                state: {
                    type: hb.validationTypes.ENUM,
                    expected: ib.messageState
                }
            }, a)) {
            var b = Ha(ib.requests.PUBLISH_EVENT, {
                dialogId: a.dialogId,
                conversationId: a.conversationId,
                event: {
                    type: ib.eventTypes.ACCEPT_STATUS,
                    status: a.state,
                    sequenceList: a.sequenceList && a.sequenceList.constructor === Array ? a.sequenceList : [a.sequenceList]
                }
            }, a.metadata);
            a.retryOnError = !0;
            return Ga(b, a)
        }
    }

    function N(a) {
        return hb.validateConditions({
            brandId: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.GET_BRAND_PROFILE, {
            brandId: a.brandId
        }), a) : void 0
    }

    function O(a) {
        if (hb.validateConditions({
                brandId: {
                    type: hb.validationTypes.STRING
                },
                name: {
                    type: hb.validationTypes.STRING
                },
                description: {
                    type: hb.validationTypes.STRING
                },
                category: {
                    type: hb.validationTypes.STRING
                },
                dateJoined: {
                    type: hb.validationTypes.NUMBER
                },
                lastUpdated: {
                    type: hb.validationTypes.NUMBER
                },
                logoImg: {
                    type: hb.validationTypes.STRING
                },
                backgroundImg: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = Ha(ib.requests.SET_BRAND_PROFILE);
            hb.overRideMerge(b.body, a);
            return Ga(b, a)
        }
    }

    function P(a) {
        return hb.validateConditions({
            memberType: {
                type: hb.validationTypes.CUSTOM,
                expected: ib.memberTypes.USER
            }
        }, _a) ? Ga(Ha(ib.requests.GET_BRANDS, {
            fromTimestamp: a.fromTimestamp
        }), a) : void 0
    }

    function Q(a) {
        if (La() || hb.validateConditions({
                brandId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            var b = {
                brandId: a.brandId,
                minLastUpdatedTime: a.minLastUpdatedTime,
                agentIds: a.agentIds,
                groupIds: a.groupIds,
                consumerId: a.consumerId,
                stage: a.stage || a.convState || kb
            };
            a.stage || (b.convState = a.convState || kb);
            var c = Ha(ib.requests.SUBSCRIBE_CONVERSATIONS, b);
            a.maxLastUpdatedTime && (c.body.maxLastUpdatedTime = a.maxLastUpdatedTime);
            a.maxETTR && (c.body.maxETTR = a.maxETTR);
            a.conversationId && (c.body.conversationId = a.conversationId);
            return Ga(c, a)
        }
    }

    function R(a) {
        return hb.validateConditions({
            subscriptionId: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.UNSUBSCRIBE_CONVERSATIONS, {
            subscriptionId: a.subscriptionId
        }), a) : void 0
    }

    function S(a) {
        return hb.validateConditions({
            brandId: {
                type: hb.validationTypes.STRING
            },
            subscriptionId: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.SUBSCRIBE_CONVERSATIONS, {
            brandId: a.brandId,
            maxLastUpdatedTime: a.maxLastUpdatedTime,
            minLastUpdatedTime: a.minLastUpdatedTime,
            agentIds: a.agentIds,
            groupIds: a.groupIds,
            consumerId: a.consumerId,
            maxETTR: a.maxETTR,
            stage: a.convState || kb,
            convState: a.convState || kb,
            subscriptionId: a.subscriptionId
        }), a) : void 0
    }

    function T(a) {
        var b, c;
        if (hb.validateConditions({
                conversationId: {
                    type: hb.validationTypes.STRING
                }
            }, a)) {
            b = {
                conversationId: a.conversationId,
                conversationField: a.CSAT
            };
            b.conversationField.field = ib.conversationFields.CSAT_RATE;
            c = Ha(ib.requests.UPDATE_CONVERSATION, b);
            return Ga(c, a)
        }
    }

    function U(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            },
            delayType: {
                type: hb.validationTypes.ENUM,
                expected: ib.delayTypes
            },
            tillWhen: {
                type: hb.validationTypes.NUMBER
            }
        }, a) ? Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: ib.conversationFields.DELAY,
                type: a.delayType,
                tillWhen: a.tillWhen
            }
        }), a) : void 0
    }

    function V(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: ib.conversationFields.MANUAL_ETTR,
                time: a.time || null
            }
        }), a) : void 0
    }

    function W(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            },
            ttrType: {
                type: hb.validationTypes.ENUM,
                expected: ib.effectiveTTRTypes
            },
            value: {
                type: hb.validationTypes.NUMBER,
                optional: !0
            }
        }, a) ? Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: ib.conversationFields.TTR,
                ttrType: a.ttrType,
                value: a.value || 0
            }
        }), a) : void 0
    }

    function X(a) {
        return hb.validateConditions({
            note: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: ib.conversationFields.NOTE,
                note: a.note
            }
        }), a) : void 0
    }

    function Y(a) {
        return hb.validateConditions({
            topic: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: ib.conversationFields.TOPIC,
                note: a.topic
            }
        }), a) : void 0
    }

    function Z(a) {
        _(a, ib.dialogActions.CREATE)
    }

    function $(a) {
        _(a, ib.dialogActions.UPDATE)
    }

    function _(a, b) {
        hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            },
            dialogId: {
                type: hb.validationTypes.STRING
            }
        }, a) && Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: ib.conversationFields.DIALOG_CHANGE,
                type: b || ib.dialogActions.CREATE,
                dialogId: a.dialogId,
                dialog: a.dialog
            }
        }), a)
    }

    function aa(a) {
        return hb.validateConditions({
            conversationId: {
                type: hb.validationTypes.STRING
            },
            dialogId: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.UPDATE_CONVERSATION, {
            conversationId: a.conversationId,
            conversationField: {
                field: ib.conversationFields.DIALOG_CHANGE,
                type: ib.dialogActions.UPDATE,
                dialog: {
                    dialogId: a.dialogId,
                    state: ib.dialog.states.CLOSE,
                    closedCause: a.closedCause
                }
            }
        }), a) : void 0
    }

    function ba() {
        return _a && _a.serverTimeDiff
    }

    function ca(a) {
        return hb.validateConditions({
            fileSize: {
                type: hb.validationTypes.STRING
            },
            fileType: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.GENERATE_UPLOAD_FILE_URL, {
            fileSize: a.fileSize,
            fileType: a.fileType
        }), a) : void 0
    }

    function da(a) {
        return hb.validateConditions({
            relativePath: {
                type: hb.validationTypes.STRING
            }
        }, a) ? Ga(Ha(ib.requests.GENERATE_DOWNLOAD_FILE_URL, {
            relativePath: a.relativePath
        }), a) : void 0
    }

    function ea() {
        return Oa
    }

    function fa() {
        Oa && Oa.closeConnection && Oa.closeConnection();
        jb.unregister({
            appName: Sa
        });
        jb = null
    }

    function ga() {
        return !Oa || !Oa.isConnected || Oa.isConnected()
    }

    function ha() {
        return !Oa || !Oa.isWebSocketConnection || Oa.isWebSocketConnection()
    }

    function ia() {
        clearTimeout(Na);
        var a = new Date,
            b = 0,
            c = [];
        for (var d in Za)
            if (Za.hasOwnProperty(d) && Za[d].launchTime) {
                var e = a - Za[d].launchTime;
                e > Za[d].timeout ? c.push(d) : b++
            }
        if (c.length) {
            hb.error("Checking errors found " + c.length + " timeout callbacks to call", Sa);
            for (var f = 0; f < c.length; f++) wa(c[f], gb, !0)
        }
        b > 0 && (Na = setTimeout(ia, bb));
        return !0
    }

    function ja(a, b, c) {
        if (Za[a]) {
            c.retries = c.retries || 0;
            if (c.retries < cb) {
                c.retries++;
                Za[a].retryInProgress = Ga.call(this, b, c)
            }
        }
    }

    function ka(a, b) {
        if (hb.validateConditions({
                token: {
                    type: hb.validationTypes.STRING
                }
            }, b)) {
            var c = {
                type: ib.headers.CLIENT_PROPERTIES,
                features: a.queryParameters.features,
                appId: a.queryParameters.appName,
                appVersion: a.queryParameters.appVersion,
                integrationVersion: a.queryParameters.integrationVersion,
                integration: "WEB_SDK"
            };
            a.queryParameters.timeZone && (c.timeZone = a.queryParameters.timeZone);
            var d = [{
                    type: ib.headers.CONSUMER_AUTHENTICATION,
                    jwt: b.token
                }, c],
                e = Ha(ib.requests.INIT_CONNECTION, null, null, d);
            Pa = e.id;
            return Ga(e, a);
        }
    }

    function la(a) {
        a.domain ? Oa = new lpTag.AMSTransport({
            ping: {
                request: Ha(ib.requests.GET_CLOCK),
                keys: {
                    request: "id",
                    response: "reqId"
                },
                timeout: a.pingTimeout || 1e4,
                idleBeforePing: a.idleBeforePing || 1e4,
                callback: na
            },
            connectorsSfConfig: a.connectorsSfConfig,
            storageConf: a.storageConf,
            message: f,
            closed: za,
            created: xa,
            domain: a.domain,
            IDPDomain: a.IDPDomain,
            historyDomain: a.historyDomain,
            authCode: a.authCode,
            redirect_uri: a.redirect_uri,
            authType: a.authType,
            hasAuthentication: a.hasAuthentication,
            token: a.token,
            memberType: _a.memberType,
            apiVersion: Ua,
            connectorId: a.connectorId,
            accountId: a.accountId,
            noWS: a.noWS,
            queryParameters: a.queryParameters,
            restRecoveryPolicy: a.restRecoveryPolicy,
            onSessionInvalidated: a.onSessionInvalidated,
            onAuthenticationError: Ba,
            restCallback: ya
        }) : hb.error("No domain on initialization", Sa)
    }

    function ma() {
        ib.requests = lpTag.AMSStatics.requestsV3;
        ib.responses = lpTag.AMSStatics.responsesV3;
        ib.notifications = lpTag.AMSStatics.notificationsV3
    }

    function na(a) {
        a && "PING_SUCCESS" === a.state ? ua(ib.events.PING_SUCCESS, a || {}) : ua(ib.events.SERVICE_ISSUE, a || {
            connected: !1,
            ts: (new Date).getTime()
        })
    }

    function oa(a, b) {
        return Ga(Ha(ib.requests.QUERY_MESSAGES, {
            conversationId: a.conversationId,
            dialogId: hb.getDialogIdFromMessageRequest(a),
            maxQuantity: b.maxQuantity,
            olderThanSequence: b.olderThan,
            newerThanSequence: b.newerThan
        }), a)
    }

    function pa(a) {
        var b, c = ib.notifications[a && a.type];
        if (c) {
            b = a.body.changes && a.body.changes[0] && a.body.changes[0].dialogId;
            if (La() && c === ib.notifications["ms.MessagingEventNotification"] && nb.indexOf(b) >= 0) {
                nb.splice(nb.indexOf(b), 1);
                a.body.firstNotification = !0;
                a.body.subscriptionId && (a.body.dialogId = mb[a.body.subscriptionId])
            }
            ua(c, a.body)
        }
        ua(ib.events.MSG_RECEIVE, {})
    }

    function qa(a) {
        var b = null;
        switch (a.type) {
            case ib.responses.GET_CLOCK:
                Ca(a.body);
                break;
            case ib.responses.GET_USER_PROFILE:
                Da(a.body);
                break;
            default:
                b = ib.responses[a.type]
        }
        if (La()) {
            if (Pa === a.reqId) ua(ib.events.INITIALIZED, a);
            else if (lb[a.reqId]) {
                a.body.subscriptionId && (mb[a.body.subscriptionId] = lb[a.reqId]);
                ua(ib.events.SUBSCRIBE_MESSAGING_RESPONSE, a)
            } else if (Qa === a.reqId) ua("onConversationStepUp", a);
            else if (b) {
                b === ib.events.BRAND_PROFILE && (a.body.timeDiff = ba());
                ua(b, a.body, a.reqId)
            }
        } else b && ua(b, a.body, a.reqId);
        ra(a);
        ua(ib.events.MSG_RECEIVE, {})
    }

    function ra(a) {
        if (void 0 !== a.code && a.code > 399) {
            var b = a.body;
            if (429 === a.code) {
                "object" != typeof b && (b = {});
                b.throttling = !0;
                pb.emit(lpTag.AMSStatics.EVENT_EMITTER_EVENTS.ON_THROTTLED_BY_SERVER, a)
            }
            wa(a.reqId, b, !0)
        } else wa(a.reqId, a.body, !1)
    }

    function sa(a) {
        var b, c;
        for (var d in a)
            if (a.hasOwnProperty(d) && 0 === d.indexOf("on")) {
                b = a[d];
                c = b.constructor === Array ? b : [b];
                for (var e = 0; e < c.length; e++) ta(d, c[e].func || c[e], c[e].context, Sa)
            }
    }

    function ta(a, b, c, d) {
        var e = {
            eventName: a,
            appName: d || "",
            aSync: !1,
            func: b,
            context: c || null
        };
        return jb.register(e)
    }

    function ua(a, b, c) {
        c && "object" == typeof b && (b.requestId = c);
        jb.trigger({
            eventName: a,
            appName: Sa,
            data: b,
            passDataByRef: !1
        })
    }

    function va(a, b, c) {
        if (a && c && (c.success || c.error)) {
            Za[a] = {
                error: c.error,
                success: c.success,
                context: c.context,
                launchTime: new Date,
                timeout: c.timeout || ab
            };
            Ma(b) && db > 0 && (Za[a].retryInProgress = setTimeout(ja.bind(this, a, b, c), db));
            Na = setTimeout(ia, bb)
        }
    }

    function wa(a, b, c) {
        if (Za[a]) {
            hb.runCallBack(c ? Za[a].error : Za[a].success, b, Za[a].context);
            Ea(a)
        }
    }

    function xa(b) {
        Wa = !0;
        e();
        La() && hb.runCallBack(a.onSocketCreated, {
            token: Oa.getToken()
        });
        ua(ib.events.CONNECTED, b || {
            connected: !0,
            ts: (new Date).getTime()
        });
        Ia()
    }

    function ya(a) {
        Wa = !0;
        a && 200 === a.responseCode && (a.code = 200);
        ua(ib.events.INITIALIZED, a)
    }

    function za(a) {
        Wa = !1;
        Aa();
        a && a.tokenIsInvalid && ua(ib.events.SESSION_INVALIDATED, {
            userId: _a.userId || null
        });
        ua(ib.events.CLOSED, a || {
            connected: !1,
            ts: (new Date).getTime()
        })
    }

    function Aa() {
        for (var a in Za) Za.hasOwnProperty(a) && wa(a, gb, !0)
    }

    function Ba(a) {
        ua(ib.events.AUTHENTICATION_ERROR, a)
    }

    function Ca(a) {
        a && a.currentTime && (_a.serverTimeDiff = (new Date).getTime() - a.currentTime)
    }

    function Da(a) {
        var b = hb.remodel(a, {
            userId: "userId",
            firstName: "firstName",
            lastName: "lastName",
            authenticatedData: "authenticatedData",
            imgUrl: "avatarUrl",
            role: "role",
            backgroundImage: "backgndImgUri",
            phone: "privateData.mobileNum",
            mail: "privateData.mail",
            description: "description",
            isDeleted: "isDeleted"
        });
        ua(ib.events.USER_INFO, b)
    }

    function Ea(a) {
        for (var b in Za[a])
            if (Za[a].hasOwnProperty(b)) {
                "retryInProgress" === b && clearTimeout(Za[a][b]);
                Za[a][b] = null;
                delete Za[a][b]
            }
        Za[a] = null;
        delete Za[a]
    }

    function Fa() {
        $a.forEach(function(a) {
            Ga(a.request, a.options)
        });
        $a = []
    }

    function Ga(a, b) {
        if (a) {
            b = b || {};
            if (!b.errorHasWrapper) {
                b.errorHasWrapper = !0;
                b.error = Ja(a, b)
            }
            if (ob.inAction) $a.push({
                request: a,
                options: b
            });
            else if (!Wa && Ya) Xa.push({
                request: a,
                options: b
            });
            else {
                va(a.id, a, b);
                Oa.sendMessage(a)
            }
            return a.id
        }
    }

    function Ha(a, b, c, d) {
        var e = {
            kind: ib.messageKinds.REQUEST,
            id: hb.getUID(),
            type: a,
            body: b || {}
        };
        c && (e.metadata = c);
        d && (e.headers = d);
        return e
    }

    function Ia() {
        for (var a; Xa.length > 0 && Wa;) {
            a = Xa.shift();
            Ga(a.request, a.options)
        }
    }

    function Ja(a, b) {
        var c = b.error;
        return function(d) {
            b.failure = "number" == typeof b.failure ? b.failure : 0;
            if (ob.enabled && d.throttling) {
                ob.inAction = !0;
                clearTimeout(Ra);
                Ra = setTimeout(function() {
                    ob.inAction = !1;
                    Fa()
                }, ob.value);
                Ga(a, b)
            } else if ((b.retryOnError || Ya && d.timeout) && b.failure <= eb) {
                b.failure++;
                Ya && d.timeout ? Xa.push({
                    request: a,
                    options: b
                }) : setTimeout(function() {
                    Ga(a, b)
                }, fb)
            } else hb.runCallBack(c, d, b.context)
        }
    }

    function Ka(a) {
        return function(b, c) {
            ta(a, b, c, Sa)
        }
    }

    function La() {
        return 3 === Ua
    }

    function Ma(a) {
        var b = hb.getProperty(a, "body.event.type") === ib.eventTypes.CONTENT;
        return a && a.type === ib.requests.PUBLISH_EVENT && b
    }
    var Na, Oa, Pa, Qa, Ra, Sa = "AMSClient",
        Ta = "3.0.64",
        Ua = 2,
        Va = 200,
        Wa = !1,
        Xa = [],
        Ya = !1,
        Za = {},
        $a = [],
        _a = {},
        ab = 1e4,
        bb = 1e3,
        cb = 1,
        db = 5e3,
        eb = 3,
        fb = 200,
        gb = {
            timeout: "Request has timed out"
        },
        hb = lpTag.AMSUtils(),
        ib = hb.clone(lpTag.AMSStatics),
        jb = new lpTag.Chronos.Events,
        kb = hb.getValues(ib.conversation.states),
        lb = {},
        mb = {},
        nb = [],
        ob = {
            enabled: !1,
            value: 1e3,
            inAction: !1
        },
        pb = new lpTag.AMSEventEmitter;
    b(a);
    this.name = Sa;
    this.v = Ta;
    this.apiVersion = Ua;
    this.init = b;
    if (La()) {
        this.subscribeMessagingEvents = I;
        this.generateURLForDownloadFile = da
    } else {
        this.queryMessages = K;
        this.queryMessagesNewerThan = L;
        this.newQueryMessages = J
    }
    this.reInit = d;
    this.getTimeDiff = ba;
    this.dispose = fa;
    this.getClock = e;
    this.handleMessage = f;
    this.sendMessage = g;
    this.sendPCIMessage = h;
    this.sendStructuredContentMessage = i;
    this.imageMessage = j;
    this.setDialogChatState = k;
    this.setConversationState = l;
    this.closeConversation = m;
    this.changeConversationParticipant = n;
    this.updateConversationParticipantForStepUp = o;
    this.unassignConversation = s;
    this.setAgentStatus = x;
    this.agentSessionStart = y;
    this.agentSessionEnd = z;
    this.subscribeAgentStatusUpdates = A;
    this.getUserProfile = t;
    this.getMyUserProfile = u;
    this.generateUploadToken = v;
    this.generateDownloadToken = w;
    this.setUserProfile = C;
    this.setConsumerProfileOnBehalfOfAgent = B;
    this.createConversation = D;
    this.takeConversation = G;
    this.rejectRing = H;
    this.subscribeToRouting = E;
    this.updateRoutingSubscription = F;
    this.markMessagesState = M;
    this.getBrandProfile = N;
    this.setBrandProfile = O;
    this.getBrands = P;
    this.updateConversationsSubscription = S;
    this.subscribeConversations = Q;
    this.unsubscribeConversations = R;
    this.setCSAT = T;
    this.setDelay = U;
    this.setManualETTR = V;
    this.restoreManualETTR = V;
    this.setTTR = W;
    this.setNote = X;
    this.setTopic = Y;
    this.transferConversationBySkill = p;
    this.transferConversationByAgent = q;
    this.assignConversationToAgent = r;
    this.openDialog = Z;
    this.updateDialog = $;
    this.getTransport = ea;
    this.generateURLForUploadFile = ca;
    this.closeDialog = aa;
    this.isConnected = ga;
    this.isWebSocketConnection = ha;
    this.on = pb.on;
    this.clearAllListeners = pb.clearAllListeners;
    this.off = pb.off;
    this.emit = pb.emit;
    this.once = pb.once;
    this.events = pb.events;
    for (var qb in ib.events)
        if (ib.events.hasOwnProperty(qb)) {
            var rb = ib.events[qb];
            this[rb] = Ka(rb)
        }
};
window.lpTag = window.lpTag || {};
lpTag.consumerHistoryAPI = lpTag.consumerHistoryAPI || function(a) {
    function b(a) {
        if (a && a.success && A && !G) {
            var b = {
                error: i.bind(this, a),
                queryParameters: {
                    state: "close,archive",
                    limit: v
                },
                type: t.CONVERSATIONS
            };
            H && (b.queryParameters.source = H);
            var c = B.getProperty(a, "existingData.body._responseMetadata.count"),
                d = B.getProperty(a, "existingData.body.conversationHistoryMetadataRecords.length");
            b.queryParameters.offset = c && d && c > d ? d : 0;
            var g = a.success;
            a.existingData || (g = f.bind(this, a));
            b.success = e.bind(this, g, a.error, a.existingData, a.to);
            A.sendHistoryRequest(b);
            B.debug("getConversations called correctly", "getConversations")
        } else G ? B.debug("getConversations blocked", "getConversations") : B.error("getConversations called incorrectly", "getConversations")
    }

    function c(a) {
        if (a && a.success && A && a.conversationId && !G)
            if (F[a.conversationId] && F[a.conversationId][a.dialogId]) {
                a.success(F[a.conversationId][a.dialogId]);
                delete F[a.conversationId][a.dialogId]
            } else if (D[a.conversationId]) {
            E[a.conversationId] || (E[a.conversationId] = []);
            E[a.conversationId].push(a)
        } else {
            D[a.conversationId] = a;
            var b = {
                success: j.bind(this, a),
                error: s.bind(this, a),
                queryParameters: {
                    conversationId: a.conversationId
                },
                type: t.MESSAGES
            };
            H && (b.queryParameters.source = H);
            A.sendHistoryRequest(b);
            B.debug("getMessages called correctly", "getMessages")
        } else G ? B.debug("getMessages blocked", "getMessages") : B.error("getMessages called incorrectly", "getMessages");
        return a && a.conversationId
    }

    function d(a) {
        if (a && a.success && A && a.conversationId && a.fileId) {
            var b = {
                success: a.success,
                error: a.error,
                queryParameters: {
                    conversationId: a.conversationId,
                    fileId: a.fileId
                },
                type: t.FILE
            };
            H && (b.queryParameters.source = H);
            A.sendHistoryRequest(b);
            B.debug("getMessages called correctly", "getMessages")
        } else B.error("getMessages called incorrectly", "getMessages");
        return a && a.conversationId
    }

    function e(a, c, d, e, f) {
        var g = f,
            h = B.getProperty(g, "body._responseMetadata.count"),
            i = B.getProperty(g, "body.conversationHistoryMetadataRecords.length");
        if (h && i && h > i && d && d.body && d.body.conversationHistoryMetadataRecords) {
            g = d;
            g.body.conversationHistoryMetadataRecords = g.body.conversationHistoryMetadataRecords.concat(f.body.conversationHistoryMetadataRecords);
            h = B.getProperty(g, "body._responseMetadata.count");
            i = B.getProperty(g, "body.conversationHistoryMetadataRecords.length")
        }
        h && i && h > i ? b({
            success: a,
            error: c,
            existingData: g,
            to: e
        }) : a(g)
    }

    function f(a, b) {
        var c = b && b.body && b.body.conversationHistoryMetadataRecords || [],
            d = g(c),
            e = {
                changes: d.map(function(a) {
                    var b = {
                        type: "UPSERT",
                        result: {
                            convId: a.convId,
                            conversationDetails: {
                                participants: a.participants,
                                state: a.state,
                                startTs: a.startTs,
                                endTs: a.endTs,
                                metaDataLastUpdateTs: a.endTs,
                                csat: a.csat,
                                stage: a.stage
                            }
                        }
                    };
                    b.result.conversationDetails.csat && (b.result.conversationDetails.csat.endTs = a.endTs);
                    b.result.conversationDetails.dialogs = a.dialogs || [{
                        dialogId: a.convId,
                        participantsDetails: a.participants,
                        dialogType: C.dialog.types.MAIN,
                        state: a.state,
                        closedBy: a.closeReason,
                        creationTs: a.startTs,
                        endTs: a.endTs,
                        channelType: C.dialog.channelTypes.MESSAGING
                    }];
                    return b
                }),
                code: b && b.responseCode || b && b.statusCode
            },
            f = e.changes;
        e.changes = h(f);
        e.changes.length > 0 || 0 === f.length ? a.success.call(this, e) : i.call(this, a, {
            responseCode: 404
        })
    }

    function g(a) {
        return a && a.length > 0 ? a.filter(function(a) {
            a.state && !a.stage && (a.stage = a.state);
            return a.stage === C.conversation.states.CLOSE
        }) : []
    }

    function h(a) {
        return a.filter(function(a) {
            return a && a.result && a.result.convId && a.result.conversationDetails && a.result.conversationDetails.startTs && a.result.conversationDetails.endTs && a.result.conversationDetails.participants && a.result.conversationDetails.participants.length > 0
        })
    }

    function i(a, c) {
        a.retryCount = a.retryCount || 0;
        if (a.retryCount >= y) {
            if (a.existingData && a.success) a.success.call(this, a.existingData);
            else if (a.error) {
                c && (c.code = c.responseCode || c.statusCode);
                a.error.call(this, c)
            }
        } else {
            a.retryCount++;
            if (!a.existingData && c && (400 === c.responseCode || 400 === c.statusCode)) {
                a.to = null;
                delete a.to
            }
            setTimeout(function() {
                b.call(this, a)
            }, w * a.retryCount)
        }
    }

    function j(a, b) {
        var c, d = a && a.success,
            e = a && a.conversationId,
            f = a && a.dialogId,
            g = {
                changes: b && b.body && b.body.messageEventRecords,
                code: b && b.responseCode || b && b.statusCode
            };
        if (b && e && d && p(g.changes)) {
            g.changes.forEach(function(b) {
                b.dialogId = b.dialogId || e;
                a.participants && b.originatorId && a.participants[b.originatorId] ? b.originatorMetadata = {
                    id: b.originatorId,
                    role: a.participants[b.originatorId].type
                } : b.originatorId && (b.originatorMetadata = {
                    id: b.originatorId,
                    role: C.participant.roles.READER
                })
            });
            k(g, e);
            c = F[e][f];
            d.call(this, c);
            delete F[e][f];
            m(e)
        } else if (g && g.changes && 0 === g.changes.length) {
            q.call(this, a, g);
            o.call(this, e, g)
        } else {
            r.call(this, a, {
                responseCode: 404
            });
            n.call(this, e, {
                responseCode: 404
            })
        }
    }

    function k(a, b) {
        for (var c = {}, d = 0; d < a.changes.length; d++) {
            c[a.changes[d].dialogId] || (c[a.changes[d].dialogId] = {
                changes: [],
                code: 200,
                dialogId: a.changes[d].dialogId
            });
            c[a.changes[d].dialogId].changes.push(a.changes[d])
        }
        F[b] = c
    }

    function l(a, b) {
        if (a && E[a]) {
            for (var c = 0; c < E[a].length; c++) {
                var d = E[a][c];
                b.call(this, d)
            }
            delete E[a]
        }
        a && D[a] && delete D[a]
    }

    function m(a) {
        l.call(this, a, function(b) {
            if (F[a] && F[a][b.dialogId]) {
                b.success(F[a][b.dialogId]);
                delete F[a][b.dialogId]
            }
        })
    }

    function n(a, b) {
        l.call(this, a, function(a) {
            r.call(this, a, b)
        })
    }

    function o(a, b) {
        l.call(this, a, function(a) {
            q.call(this, a, b)
        })
    }

    function p(a) {
        return a.filter(function(a) {
            return a && a.event && a.event.type && a.event.type === u
        }).length > 0
    }

    function q(a, b) {
        a.retryCount = a.retryCount || 0;
        if (a.retryCount >= z) {
            b.dialogId = a.dialogId;
            a.success.call(this, b)
        } else {
            a.retryCount++;
            setTimeout(function() {
                c.call(this, a)
            }, x * a.retryCount)
        }
    }

    function r(a, b) {
        b && (b.code = b.responseCode || b.statusCode);
        a.error.call(this, b)
    }

    function s(a, b) {
        r.call(this, a, b);
        n.call(this, a.conversationId, b)
    }
    var t = {
            CONVERSATIONS: "CONVERSATIONS",
            MESSAGES: "MESSAGES",
            FILE: "FILE"
        },
        u = "ContentEvent",
        v = a.limit || 50,
        w = a.conversationsRetryTimeout || 5e3,
        x = a.messagesRetryTimeout || 3e3,
        y = a.conversationsMaxRetries || 3,
        z = a.messagesMaxRetries || 3,
        A = a.transport,
        B = a.utils || lpTag.AMSUtils(),
        C = lpTag.AMSStatics,
        D = {},
        E = {},
        F = {},
        G = a.blockHistory,
        H = a.historySource;
    this.getConversations = b;
    this.getMessages = c;
    this.generateDownloadURL = d
};
window.lpTag = window.lpTag || {};
lpTag.UMSClientAPI = lpTag.UMSClientAPI || function(a) {
    function b(a) {
        if (a) {
            qa = new lpTag.Chronos.Events;
            a.apiVersion = a.apiVersion || ua;
            a = ka(a);
            la(a, wa);
            a = ja(a, Ma);
            pa ? pa.reInit(a) : pa = new lpTag.AMSClient(a);
            oa();
            a.historyDomain && (Ha = new lpTag.consumerHistoryAPI({
                transport: pa.getTransport(),
                blockHistory: a.blockHistory,
                historySource: a.historySource,
                messagesMaxRetries: a.emptyHistoryConvoMaxRetries,
                messagesRetryTimeout: a.emptyHistoryConvoRetryTimeout
            }))
        }
    }

    function c(a) {
        if (a) {
            qa.unregister({
                appName: sa
            });
            b(a)
        }
    }

    function d() {
        pa.dispose();
        pa = null;
        qa.unregister({
            appName: sa
        });
        za = {};
        Aa = {};
        ya = [];
        Ba = {}
    }

    function e(a) {
        if (Ha && u(a && a.conversationId)) {
            a.success = w.bind(this, a.conversationId);
            a.error = x.bind(this, a.conversationId);
            a.participants = Aa;
            return Ha.getMessages(a)
        }
        return pa.subscribeMessagingEvents(a)
    }

    function f(a) {
        Fa.validateConditions({
            skillId: {
                type: Fa.validationTypes.NUMBER
            }
        }, a) && pa.getTransport().sendShiftStatusRequest(a)
    }

    function g(a) {
        if (Fa.validateConditions({
                dialogId: {
                    type: Fa.validationTypes.STRING
                }
            }, a)) {
            a.conversationId = Ca[a.dialogId];
            if (ra) {
                a.closedCause = xa.CONSUMER;
                return pa.closeDialog(a)
            }
            return pa.closeConversation(a)
        }
    }

    function h(a) {
        ra && (a.field = va.conversationFields.STAGE);
        return pa.closeConversation(a)
    }

    function i(a) {
        if (Fa.validateConditions({
                dialogId: {
                    type: Fa.validationTypes.STRING
                }
            }, a)) {
            a.conversationId = Ca[a.dialogId];
            return pa.sendMessage(a)
        }
    }

    function j(a) {
        if (Fa.validateConditions({
                dialogId: {
                    type: Fa.validationTypes.STRING
                }
            }, a)) {
            a.conversationId = Ca[a.dialogId];
            return pa.sendPCIMessage(a)
        }
    }

    function k(a) {
        if (Fa.validateConditions({
                dialogId: {
                    type: Fa.validationTypes.STRING
                }
            }, a)) {
            a.conversationId = Ca[a.dialogId];
            return pa.sendStructuredContentMessage(a)
        }
    }

    function l(a) {
        if (Fa.validateConditions({
                dialogId: {
                    type: Fa.validationTypes.STRING
                }
            }, a)) {
            a.conversationId = Ca[a.dialogId];
            return pa.markMessagesState(a)
        }
    }

    function m(a) {
        if (Fa.validateConditions({
                dialogId: {
                    type: Fa.validationTypes.STRING
                }
            }, a)) {
            a.conversationId = Ca[a.dialogId];
            return pa.setDialogChatState(a)
        }
    }

    function n(a) {
        return Fa.validateConditions({
            relativePath: {
                type: Fa.validationTypes.STRING
            }
        }, a) ? Ha && u(a.conversationId) ? Ha.generateDownloadURL({
            fileId: a.relativePath.split("/").pop(),
            conversationId: a.conversationId,
            success: a.success,
            error: a.error
        }) : pa.generateURLForDownloadFile(a) : void 0
    }

    function o(a) {
        var b, c = [],
            d = a.changes;
        ra = a.subscriptionId !== Ja ? p(d) : ra;
        q(d);
        if (Array.isArray(d))
            for (var e = 0; e < d.length; e++) {
                b = d[e] && d[e].result;
                if (b) {
                    b.notificationType = d[e].type;
                    b.conversationDetails.state = b.conversationDetails.stage ? b.conversationDetails.stage : b.conversationDetails.state;
                    c.push(b)
                }
            }
        c && c.length > 0 ? s(c, a.subscriptionId) : r(a.subscriptionId)
    }

    function p(a) {
        for (var b = 0; b < a.length; b++)
            if (a[b].result.conversationDetails.stage) return !0;
        return !1
    }

    function q(a) {
        for (var b = 0; b < a.length; b++) {
            var c = a[b].result,
                d = c.conversationDetails,
                e = d.dialogs || [],
                f = d.participants;
            0 === e.length && (e[0] = {
                dialogId: c.convId,
                creationTs: d.startTs,
                dialogType: va.dialog.types.MAIN,
                channelType: va.dialog.channelTypes.MESSAGING
            });
            for (var g = 0; g < e.length; g++)
                if (d.stage) e[g].participants = e[g].participantsDetails;
                else {
                    e[g].participants = f;
                    e[g].state = d.state;
                    e[g].closedBy = d.closeReason || null;
                    e[g].metaDataLastUpdateTs = d.metaDataLastUpdateTs;
                    e[g].endTs = d.endTs
                }
        }
    }

    function r(a) {
        ia(wa.CONVERSATION_LIST, {
            data: [],
            subscriptionId: a
        })
    }

    function s(a, b) {
        for (var c, d, e, f, g = [], h = za[b] || [], i = 0; i < a.length; i++) {
            c = Fa.getProperty(a[i], "convId");
            h[c] = h[c] || {};
            v(g, a[i], h, c);
            y(g, a[i], h, c);
            z(g, a[i], h, c);
            C(g, a[i], h, c);
            E(g, a[i], h, c);
            if ("DELETE" === a[i].notificationType) {
                d = Fa.getProperty(a[i], "conversationDetails");
                e = Fa.getProperty(d, "state");
                f = Fa.getProperty(d, "stage");
                ia(wa.DELETE_SUBSCRIBE_FROM_CONVERSATION, {
                    subscriptionId: b,
                    conversationId: c,
                    state: e,
                    stage: f
                })
            }
        }
        za[b] = h;
        for (var j in g) g.hasOwnProperty(j) && ia(j, {
            data: g[j],
            subscriptionId: b
        });
        if (Ha && !Ia && b !== Ja) {
            Ia = !0;
            Ha.getConversations({
                success: t
            })
        }
    }

    function t(a) {
        if (a) {
            a.subscriptionId = Ja;
            o(a)
        }
    }

    function u(a) {
        return !!a && !!za[Ja] && !!za[Ja][a]
    }

    function v(a, b, c, d) {
        var e = Fa.getProperty(b, "conversationDetails.skillId");
        if (!c[d].published || c[d].skillId !== e) {
            c[d].published = !0;
            c[d].skillId = e;
            A(a, wa.CONVERSATION_LIST, b)
        }
    }

    function w(a, b) {
        pa.handleMessage({
            kind: va.messageKinds.RESPONSE,
            type: Ka,
            reqId: a,
            body: {
                reqId: a,
                code: b && b.code || 200
            }
        });
        O(b)
    }

    function x(a, b) {
        pa.handleMessage({
            kind: va.messageKinds.RESPONSE,
            type: Ka,
            reqId: a,
            body: {
                reqId: a,
                code: b && b.code || 500
            }
        })
    }

    function y(a, b, c, d) {
        var e = Fa.getProperty(b, "conversationDetails.state"),
            f = Fa.getProperty(b, "conversationDetails.metaDataLastUpdateTs"),
            g = Fa.getProperty(b, "conversationDetails.closeReason");
        if (c[d].state !== e) {
            c[d].state = e;
            e !== va.conversation.states.OPEN && N(a, b, c, d);
            A(a, wa.CONVERSATION_STATE, {
                convId: d,
                state: e,
                closeReason: g,
                ts: f
            });
            e === va.conversation.states.OPEN && N(a, b, c, d)
        } else N(a, b, c, d)
    }

    function z(a, b, c, d) {
        var e = B(b);
        if (!Fa.isSameObject(c[d].ttr, e)) {
            c[d].ttr = e;
            A(a, wa.TTR, {
                convId: d,
                ttr: e
            })
        }
    }

    function A(a, b, c) {
        a[b] = a[b] || [];
        a[b].push(c)
    }

    function B(a) {
        var b = Fa.getProperty(a, "conversationDetails.ttr") || {};
        b.manualETTR = Fa.getProperty(a, "conversationDetails.manualETTR") || null;
        b.effectiveTTR = a.effectiveTTR;
        b.delay = Fa.getProperty(a, "conversationDetails.delay.tillWhen") || null;
        b.timeDiff = pa.getTimeDiff();
        return b
    }

    function C(a, b, c, d) {
        var e = D(b);
        if (!Fa.isSameObject(c[d].csat, e)) {
            c[d].csat = e;
            A(a, wa.CSAT, {
                convId: d,
                csat: e
            })
        }
    }

    function D(a) {
        return {
            csatRate: Fa.getProperty(a, "conversationDetails.csat.csatRate"),
            status: Fa.getProperty(a, "conversationDetails.csat.status"),
            endTs: Fa.getProperty(a, "conversationDetails.endTs")
        }
    }

    function E(a, b, c, d) {
        for (var e = b.conversationDetails.conversationHandlerDetails && b.conversationDetails.conversationHandlerDetails.accountId || lpTag.site, f = 0; f < b.conversationDetails.dialogs.length; f++) {
            var g = b.conversationDetails.dialogs[f],
                h = g.dialogId,
                i = g.participants || null,
                j = i && i.filter(function(a) {
                    return a.role === this.CONSUMER
                }, Ea),
                k = i && i.filter(function(a) {
                    return a.role === this.CONTROLLER
                }, Ea);
            c[d].dialogsParticipants || (c[d].dialogsParticipants = {});
            if (!Fa.isSameObject(i, c[d].dialogsParticipants[h]) && i) {
                M(k, g);
                K(i, e);
                L(j);
                F(a, h, i, c[d].dialogsParticipants[h]);
                c[d].dialogsParticipants[h] = i
            }
        }
    }

    function F(a, b, c, d) {
        var e, f, g;
        c = H(c);
        d = H(d);
        g = G(c, d);
        for (var h in g) {
            e = c && c[h];
            f = d && d[h];
            if (!Fa.isSameObject(e, f)) {
                Da[b] = Da[b] || {};
                c && I(a, f, e, b, h);
                J(a, f, e, b, h)
            }
        }
    }

    function G(a, b) {
        var c = ka(a);
        for (var d in b)
            if (c[d]) {
                c[d] = a[d].concat(b[d]);
                for (var e = [], f = 0; f < c[d].length; f++) - 1 === e.indexOf(c[d][f]) && e.push(c[d][f]);
                c[d] = e
            } else c[d] = b[d];
        return c
    }

    function H(a) {
        var b = {};
        if (a && a.length > 0)
            for (var c = 0; c < a.length; c++) {
                var d = a[c].role;
                b && b[d] ? b[d].push(a[c].id) : b[d] = [a[c].id]
            }
        return Fa.isEmpty(b) ? null : b
    }

    function I(a, b, c, d, e) {
        if (b)
            for (var f = 0; f < b.length; f++)(!c || c.indexOf(b[f]) < 0) && A(a, wa.PARTICIPANT_LEFT, {
                dialogId: d,
                type: e,
                pid: b[f]
            })
    }

    function J(a, b, c, d, e) {
        var f, g;
        if (c)
            for (var h = 0; h < c.length; h++)
                if (!b || b.indexOf(c[h]) < 0) {
                    f = c[h];
                    g = {
                        dialogId: d,
                        type: e,
                        pid: c[h]
                    };
                    if (Aa[f] && Aa[f].name) {
                        g = Fa.cloneExtend(g, Aa[f], !0);
                        A(a, wa.PARTICIPANT_JOINED, g)
                    } else Da[d][f] = g
                }
    }

    function K(a, b) {
        for (var c = 0; c < a.length; c++) a[c].role !== va.participant.roles.CONSUMER && $([a[c]], a[c].role, b)
    }

    function L(a) {
        for (var b = 0; b < a.length; b++) {
            var c = a[b].id;
            if (void 0 === Aa[c]) {
                Aa[c] = {
                    userId: c,
                    type: va.participant.roles.CONSUMER
                };
                pa.getUserProfile({
                    userId: c
                })
            }
        }
    }

    function M(a, b) {
        if (b && b.dialogId && a) {
            a = a.map(function(a) {
                return {
                    userId: a.id,
                    type: a.role,
                    dialogId: b.dialogId
                }
            });
            ia(wa.PARTICIPANT_JOINED, a)
        }
    }

    function N(a, b, c, d) {
        var e = Fa.getProperty(b, "conversationDetails.dialogs"),
            f = [],
            g = [];
        if (e && e.length) {
            for (var h = 0; h < e.length; h++) {
                Ca[e[h].dialogId] || (Ca[e[h].dialogId] = d);
                if (!Ba[e[h].dialogId] || !Fa.isSameObject(Ba[e[h].dialogId], e[h])) {
                    Ba[e[h].dialogId] = e[h];
                    e[h].state === va.dialog.states.OPEN ? g.push(e[h]) : f.push(e[h])
                }
            }
            for (var i = 0; i < f.length; i++) A(a, wa.dialogUpdated, f[i]);
            for (var j = 0; j < g.length; j++) A(a, wa.dialogUpdated, g[j])
        }
    }

    function O(b, c) {
        var d, e = b.changes || b,
            f = b.dialogId || e && e[0] && e[0].dialogId,
            g = ga(e),
            h = !1;
        b && b.firstNotification && P(e);
        if (a.isStepUpEnabled && g.length > 0)
            for (var i = ha(Aa)[0], j = 0; j < g.length; j++) {
                var k = g[j];
                if ("CONSUMER" === k.role) {
                    for (var l = 0; l < e.length; l++) {
                        var m = e[l];
                        "CONSUMER" === m.originatorMetadata.role && (m.originatorId = i.userId)
                    }
                    g.splice(j, 1)
                }
            }
        if (0 === g.length) {
            d = fa(e);
            d && f && (d.dialogId = f);
            R(d, !0 !== c);
            h = !0
        } else {
            $(g, va.participant.roles.READER, lpTag.site);
            !0 !== c && ya.push(e)
        }
        return h
    }

    function P(a) {
        for (var b = 0; b < a.length; b++) a[b].firstMessagingEventsNotification = !0
    }

    function Q(a) {
        var b = 0,
            c = {};
        c[a.PENDING] = b++;
        c[a.SENT] = b++;
        c[a.ACCEPT] = b++;
        c[a.READ] = b++;
        c[a.ERROR] = b++;
        return c
    }

    function R(a, b) {
        var c;
        a = S(a);
        if (b || a.message || a.messageState) {
            c = T(a.message);
            c = U(a.messageState, c);
            c && a.dialogId && (c.dialogId = a.dialogId);
            ia(wa.CONTENT, c)
        }
        for (var d in a) a.hasOwnProperty(d) && va.contentEvents[d] && ia(va.contentEvents[d], a[d])
    }

    function S(a) {
        a = a || {};
        a.message = Array.isArray(a.message) ? a.message : [];
        Array.isArray(a[va.contentType.RichContentEvent]) && (a.message = a.message.concat(a[va.contentType.RichContentEvent]));
        return a
    }

    function T(a) {
        var b, c, d = {};
        Array.isArray(a) && a.forEach(function(a) {
            if ("object" == typeof a) {
                c = Aa[a.originatorId] || {};
                a.state = a.state || va.messageState.SENT;
                b = Y(a.dialogId, a.sequence);
                d[b] = a
            }
        });
        return d
    }

    function U(a, b) {
        b = b || {};
        if (Array.isArray(a)) {
            a[0].firstMessagingEventsNotification && (a = V(a, b));
            for (var c = 0; c < a.length; c++) W(b, a[c])
        }
        return b
    }

    function V(a, b) {
        for (var c, d, e, f, g, h = va.messageState.READ, i = va.messageState.ACCEPT, j = 0; j < a.length; j++) {
            c = Fa.getProperty(a[j], "event.status");
            if (c === h || c === i) {
                d = Fa.getProperty(a[j], "event.sequenceList");
                e = Math.max.apply(null, d);
                f = [];
                for (var k = 0; e >= k; k++) {
                    g = Y(a[j].dialogId, k);
                    b[g] && Z(b[g], a[j]) && f.push(k)
                }
                a[j].event.sequenceList = f
            }
        }
        return a
    }

    function W(a, b) {
        var c, d = Fa.getProperty(b, "event.sequenceList");
        if (Array.isArray(d))
            for (var e = 0; e < d.length; e++) {
                c = Y(b.dialogId, d[e]);
                a[c] = X(a[c], b, d[e])
            }
    }

    function X(a, b, c) {
        var d = b.event.status;
        a ? a.state = Z(a, b) ? d : a.state : a = {
            dialogId: b.dialogId,
            sequence: c,
            originatorId: b.originatorId,
            originatorPId: b.originatorPId,
            state: d
        };
        return a
    }

    function Y(a, b) {
        return a + "_" + b
    }

    function Z(a, b) {
        var c = a.originatorId === b.originatorId,
            d = b.event.status,
            e = a.state === d,
            f = La[a.state] < La[d],
            g = a.originatorMetadata && a.originatorMetadata.role && a.originatorMetadata.role !== va.roles.CONSUMER,
            h = b.originatorMetadata && b.originatorMetadata.role !== va.roles.CONSUMER,
            i = g && !h,
            j = !g && h;
        return !c && !e && f && (i || j)
    }

    function $(a, b, c) {
        if (a)
            for (var d = 0; d < a.length; d++) {
                var e = a[d];
                if (void 0 === Aa[e.id]) {
                    var f = e.role || b;
                    Aa[e.id] = {
                        userId: e.id,
                        type: f
                    };
                    f !== Ea.CONSUMER && _(e.id, c, ba.bind(this, e.id, f))
                }
            }
    }

    function _(a, b, c) {
        var d = lpTag.protocol || "https:";
        a && "function" == typeof c && lpTag.taglets.jsonp.issueCall({
            url: d + "//" + lpTag.csds.getDomain("acCdnDomain") + "/api/account/" + (b || lpTag.site) + "/configuration/le-users/users/" + a,
            success: c,
            error: c
        })
    }

    function aa(a) {
        var b = a && a.userId;
        Aa[b] = Aa[b] || {};
        if (a && !Aa[b].name) {
            Aa[b].imgUrl = a.imgUrl;
            Aa[b].userId = b;
            Aa[b].name = a.firstName || "";
            Aa[b].name = a.firstName && a.lastName ? Aa[b].name + " " : "";
            Aa[b].name = Aa[b].name ? Aa[b].name + a.lastName : a.lastName;
            Aa[b].type = Ea.CONSUMER;
            Aa[b].known = !0;
            da(a);
            ca()
        }
    }

    function ba(a, b, c) {
        Aa[a].name = c.nickname;
        Aa[a].imgUrl = c && c.pictureUrl;
        Aa[a].userId = a;
        Aa[a].known = !0;
        da(Aa[a], b);
        ca()
    }

    function ca() {
        var b = !0;
        if (a.directOrderForPendingContent)
            for (var c = 0; ya.length && c < ya.length;) {
                b = O(ya[c], !0);
                b ? ya.splice(c, 1) : c++
            } else
                for (var d = ya.length - 1; d >= 0; d--) {
                    b = O(ya[d], !0);
                    b && ya.splice(d, 1)
                }
    }

    function da(a, b) {
        var c = !1;
        for (var d in Da)
            if (Da.hasOwnProperty(d) && Da[d][a.userId] && Aa[a.userId] && Aa[a.userId].known) {
                ea(Aa[a.userId], a, b, d);
                c = !0
            }!c && a.known && a.userId && ea({}, a, b)
    }

    function ea(a, b, c, d) {
        var e = Fa.cloneExtend(a, b, !0);
        d && (e.dialogId = d);
        c && (e.type = c);
        ia(wa.PARTICIPANT_JOINED, [e]);
        if (!Fa.isEmpty(Da[d]) && !Fa.isEmpty(Da[d][a.userId])) {
            delete Da[d][a.userId];
            Fa.isEmpty(Da[d]) && delete Da[d]
        }
    }

    function fa(a) {
        var b, c = {};
        if (Array.isArray(a))
            for (var d = 0; d < a.length; d++) {
                b = va.contentType[Fa.getProperty(a[d], "event.type")];
                if (b) {
                    c[b] = c[b] || [];
                    c[b].push(a[d])
                }
            }
        return c
    }

    function ga(a) {
        for (var b, c, d = [], e = [], f = 0; f < a.length; f++) {
            b = Aa[a[f].originatorId];
            if ((!b || !b.known) && e.indexOf(a[f].originatorId) < 0) {
                c = a[f].originatorMetadata && a[f].originatorMetadata.role;
                d.push({
                    id: a[f].originatorId,
                    role: c
                });
                e.push(a[f].originatorId)
            }
        }
        return d
    }

    function ha(a) {
        var b, c = [];
        for (var d in a) {
            b = a[d];
            "CONSUMER" === b.type && c.push(b)
        }
        return c
    }

    function ia(a, b) {
        qa.trigger({
            eventName: a,
            appName: sa,
            data: b,
            passDataByRef: !1
        })
    }

    function ja(a, b) {
        var c;
        for (var d in b)
            if (b.hasOwnProperty(d)) {
                c = a[d] || [];
                c = Array.isArray(c) ? c : [c];
                c.push(b[d]);
                a[d] = c
            }
        return a
    }

    function ka(a) {
        var b = {};
        if ("object" == typeof a)
            for (var c in a) b[c] = a[c];
        else b = a;
        return b
    }

    function la(a, b) {
        var c, d;
        for (var e in a)
            if (a.hasOwnProperty(e) && ma(e, b) && 0 === e.indexOf("on")) {
                c = a[e];
                d = c.constructor === Array ? c : [c];
                for (var f = 0; f < d.length; f++) na(e, d[f].func || d[f], d[f].context, sa);
                delete a[e]
            }
    }

    function ma(a, b) {
        for (var c in b)
            if (b.hasOwnProperty(c) && b[c] === a) return !0;
        return !1
    }

    function na(a, b, c, d) {
        var e = {
            eventName: a,
            appName: d || "",
            aSync: !1,
            func: b,
            context: c || null
        };
        return qa.register(e)
    }

    function oa() {
        for (var a in pa) Ga[a] = Ga[a] || pa[a]
    }
    var pa, qa, ra, sa = "AMSClient",
        ta = "0.0.1",
        ua = 3,
        va = lpTag.AMSStatics,
        wa = va.UMSApiEvents,
        xa = va.dialog.closedCauses,
        ya = [],
        za = {},
        Aa = {},
        Ba = {},
        Ca = {},
        Da = {},
        Ea = va.participant.roles,
        Fa = lpTag.AMSUtils(),
        Ga = this,
        Ha = null,
        Ia = !1,
        Ja = "historyAPI",
        Ka = "ms.SubscribeMessagingResponse",
        La = Q(va.messageState),
        Ma = {
            onExConversationNotification: o,
            onQueryResponse: O,
            onUserInfo: aa
        };
    b(a);
    this.name = sa;
    this.v = ta;
    this.init = b;
    this.reInit = c;
    this.dispose = d;
    this.subscribeMessagingEvents = e;
    this.sendShiftStatus = f;
    this.closeDialog = g;
    this.closeConversation = h;
    this.sendMessage = i;
    this.sendPCIMessage = j;
    this.sendStructuredContentMessage = k;
    this.markMessagesState = l;
    this.setDialogChatState = m;
    this.generateURLForDownloadFile = n
};